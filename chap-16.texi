@node Strings
@chapter Strings
@menu
* String Concepts::
* Strings Dictionary::
@end menu

@node String Concepts
@section String Concepts

@menu
* Implications of Strings Being Arrays::
* Subtypes of STRING::
@end menu
@node Implications of Strings Being Arrays
@subsection Implications of Strings Being Arrays

Since all @term{strings} are @term{arrays}, all rules which apply
generally to @term{arrays} also apply to @term{strings}.
See @ref{Array Concepts}.

For example,
@term{strings} can have @term{fill pointers},
and @term{strings} are also subject to the rules of @term{element type} @term{upgrading}
that apply to @term{arrays}.


@node Subtypes of STRING
@subsection Subtypes of STRING
All functions that operate on @term{strings}
will operate on @term{subtypes} of @term{string} as well.

However,
the consequences are undefined if a @term{character} is inserted into a @term{string}
for which the @term{element type} of the @term{string} does not include that @term{character}.

@node Strings Dictionary
@section Strings Dictionary

@menu
* string (System Class)::
* base-string::
* simple-string::
* simple-base-string::
* simple-string-p::
* char; schar::
* string (Function)::
* string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+::
* string-trim; string-left-trim; string-right-trim::
* string=; string/=; string<; string>; string<=; string>=; string-equal; +::
* stringp::
* make-string::
@end menu

@node string (System Class)
@subsection string (System Class)
@syindexanchor{string}
@cindex string


@subsubheading Class Precedence List:
@coderef{string},
@coderef{vector},
@coderef{array},
@coderef{sequence},
@coderef{t}

@subsubheading Description:

A @term{string} is a @term{specialized} @term{vector}
whose @term{elements} are @oftypes{character}.
When used as a @term{type specifier} for object creation,
@coderef{string} means @f{(vector character)}.


@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{string, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This denotes the union of all @term{types}
@f{(array @i{c} (@param{size}))}
for all @term{subtypes} @i{c} of @coderef{character};
that is, the set of @term{strings} of size @param{size}.

@subsubheading See Also:

@ref{String Concepts},
@ref{Double-Quote},
@ref{Printing Strings}

@node base-string
@subsection base-string (Type)
@syindexanchor{base-string}
@cindex base-string



@subsubheading Supertypes:

@coderef{base-string},
@coderef{string},
@coderef{vector},
@coderef{array},
@coderef{sequence},
@coderef{t}

@subsubheading Description:

@Thetype{base-string} is equivalent to
@f{(vector base-char)}.
The @term{base string} representation is the most efficient @term{string} representation
that can hold an arbitrary sequence of @term{standard characters}.


@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{base-string, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This is equivalent to the type @f{(vector base-char @param{size})};
that is, the set of @term{base strings} of size @param{size}.

@node simple-string
@subsection simple-string (Type)
@syindexanchor{simple-string}
@cindex simple-string


@subsubheading Supertypes:

@coderef{simple-string},
@coderef{string},
@coderef{vector},
@coderef{simple-array},
@coderef{array},
@coderef{sequence},
@coderef{t}

@subsubheading Description:

A @term{simple string} is a specialized one-dimensional
@term{simple array} whose @term{elements} are @oftypes{character}.
When used as a @term{type specifier} for object creation,
@coderef{simple-string} means @f{(simple-array character (@i{size}))}.

@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{simple-string, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This denotes the union of all @term{types}
@tt{(simple-array @i{c} (@param{size}))} for all @term{subtypes} @i{c} of
@coderef{character}; that is, the set of @term{simple strings} of size @param{size}.

@node simple-base-string
@subsection simple-base-string (Type)
@syindexanchor{simple-base-string}
@cindex simple-base-string


@subsubheading Supertypes:

@coderef{simple-base-string},
@coderef{base-string},
@coderef{simple-string},
@coderef{string},
@coderef{vector},
@coderef{simple-array},
@coderef{array},
@coderef{sequence},
@coderef{t}

@subsubheading Description:

@Thetype{simple-base-string} is equivalent to
@f{(simple-array base-char (*))}.

@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{simple-base-string, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This is equivalent to the type @f{(simple-array base-char (@param{size}))};
that is, the set of @term{simple base strings} of size @param{size}.


@node simple-string-p
@subsection simple-string-p (Function)
@syindexanchor{simple-string-p}
@cindex simple-string-p


@subsubheading Syntax:

@DefunWithValues{simple-string-p, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, simple-string}

@subsubheading Examples:
@lisp
 (simple-string-p "aaaaaa") @EV{} @term{true}
 (simple-string-p (make-array 6
                              :element-type 'character
                              :fill-pointer t)) @EV{} @term{false}
@end lisp


@subsubheading Notes:
@lisp
 (simple-string-p @param{object}) @EQ{} (typep @param{object} 'simple-string)
@end lisp



@node char; schar
@subsection char, schar (Accessor)
@syindexanchor{char}
@cindex char
@syindexanchor{schar}
@cindex schar
@anchor{char}
@anchor{schar}


@subsubheading Syntax:

@DefunWithValues{char, string index, character}
@DefunWithValues{schar, string index, character}




@subsubheading Arguments and Values:

@param{string}---for @coderef{char},  a @term{string};
for @coderef{schar}, a @term{simple string}.

@param{index}---a @term{valid array index} for the @param{string}.

@param{character}, @param{new-character}---a @term{character}.

@subsubheading Description:

@coderef{char} and @coderef{schar} @term{access} the @term{element} of @param{string}
specified by @param{index}.

@coderef{char} ignores @term{fill pointers} when @term{accessing} @term{elements}.

@subsubheading Examples:

@lisp
 (setq my-simple-string (make-string 6 :initial-element #@bsl{}A)) @EV{} "AAAAAA"
 (schar my-simple-string 4) @EV{} #@bsl{}A
 (setf (schar my-simple-string 4) #@bsl{}B) @EV{} #@bsl{}B
 my-simple-string @EV{} "AAAABA"
 (setq my-filled-string
       (make-array 6 :element-type 'character
                     :fill-pointer 5
                     :initial-contents my-simple-string))
@EV{} "AAAAB"
 (char my-filled-string 4) @EV{} #@bsl{}B
 (char my-filled-string 5) @EV{} #@bsl{}A
 (setf (char my-filled-string 3) #@bsl{}C) @EV{} #@bsl{}C
 (setf (char my-filled-string 5) #@bsl{}D) @EV{} #@bsl{}D
 (setf (fill-pointer my-filled-string) 6) @EV{} 6
 my-filled-string @EV{} "AAACBD"
@end lisp


@subsubheading See Also:

@ref{aref},
@ref{elt},
@ref{Compiler Terminology}

@subsubheading Notes:

@lisp
 (char s j) @EQ{} (aref (the string s) j)
@end lisp



@node string (Function)
@subsection string (Function)
@syindexanchor{string}
@cindex string


@subsubheading Syntax:

@DefunWithValues{string, x, string}

@subsubheading Arguments and Values:

@param{x}---a @term{string}, a @term{symbol}, or a @term{character}.

@param{string}---a @term{string}.

@subsubheading Description:

Returns a @term{string} described by @param{x}; specifically:


@itemize @bullet{}
@item If @param{x} is a @term{string}, it is returned.
@item If @param{x} is a @term{symbol}, its @term{name} is returned.
@item
If @param{x} is a @term{character},
then a @term{string} containing that one @term{character} is returned.
@item
@coderef{string} might perform additional, @term{implementation-defined} conversions.
@end itemize


@subsubheading Examples:

@lisp
 (string "already a string") @EV{} "already a string"
 (string 'elm) @EV{} "ELM"
 (string #@bsl{}c) @EV{} "c"
@end lisp


@subsubheading Exceptional Situations:

In the case where a conversion is defined neither by this specification nor
by the @term{implementation}, an error @oftype{type-error} is signaled.

@subsubheading See Also:

@ref{coerce},
@ref{string (System Class)} (@term{type}).

@subsubheading Notes:

@coderef{coerce} can be used to convert a @term{sequence} of @term{characters}
to a @term{string}.

@coderef{prin1-to-string}, @coderef{princ-to-string}, @coderef{write-to-string},
or @coderef{format} (with a first argument of @nil{}) can be used to get a
@term{string} representation of a @term{number} or any other @term{object}.


@node string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+
@subsection string-upcase, string-downcase, string-capitalize, nstring-upcase, nstring-downcase, nstring-capitalize (Function)
@syindexanchor{string-upcase}
@cindex string-upcase
@syindexanchor{string-downcase}
@cindex string-downcase
@syindexanchor{string-capitalize}
@cindex string-capitalize
@syindexanchor{nstring-upcase}
@cindex nstring-upcase
@syindexanchor{nstring-downcase}
@cindex nstring-downcase
@syindexanchor{nstring-capitalize}
@cindex nstring-capitalize


@subsubheading Syntax:

@DefunWithValues{string-upcase, string @keyparam{} start end, cased-string}
@DefunWithValues{string-downcase, string @keyparam{} start end, cased-string}
@DefunWithValues{string-capitalize, string @keyparam{} start end, cased-string}


@DefunWithValues{nstring-upcase, string @keyparam{} start end, string}
@DefunWithValues{nstring-downcase, string @keyparam{} start end, string}
@DefunWithValues{nstring-capitalize, string @keyparam{} start end, string}


@subsubheading Arguments and Values:

@param{string}---a @term{string designator}.
For @coderef{nstring-upcase},
@coderef{nstring-downcase},
and @coderef{nstring-capitalize},
the @param{string} @term{designator} must be a @term{string}.

@param{start}, @param{end}---@term{bounding index designators} of @param{string}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{cased-string}---a @term{string}.

@subsubheading Description:

@coderef{string-upcase},  @coderef{string-downcase},  @coderef{string-capitalize},
@coderef{nstring-upcase}, @coderef{nstring-downcase}, @coderef{nstring-capitalize}
change the case of the subsequence of @param{string}
@term{bounded} by @param{start} and @param{end}
as follows:


@table @asis
@item @id{@bf{string-upcase}}


@coderef{string-upcase} returns a @term{string} just like @param{string}
with all lowercase characters replaced by the corresponding uppercase
characters.  More precisely, each character of the result @term{string}
is produced by applying @thefunction{char-upcase} to the corresponding
character of @param{string}.

@item @id{@bf{string-downcase}}


@coderef{string-downcase} is like @coderef{string-upcase}
except that all uppercase characters are replaced by the corresponding
lowercase characters (using @coderef{char-downcase}).

@item @id{@bf{string-capitalize}}


@coderef{string-capitalize} produces a copy of @param{string} such that,
for every word in the copy, the first @term{character} of the ``word,''
if it has @term{case}, is @term{uppercase} and
any other @term{characters} with @term{case} in the word are @term{lowercase}.
For the purposes of @coderef{string-capitalize},
a ``word'' is defined to be a
consecutive subsequence consisting of @term{alphanumeric} @term{characters},
delimited at each end either by a non-@term{alphanumeric} @term{character}
or by an end of the @term{string}.

@item @id{@bf{nstring-upcase, nstring-downcase, nstring-capitalize }}


@coderef{nstring-upcase}, @coderef{nstring-downcase},
and @coderef{nstring-capitalize} are identical to @coderef{string-upcase},
@coderef{string-downcase}, and @coderef{string-capitalize}
respectively except that they  modify @param{string}.
@end table


For @coderef{string-upcase}, @coderef{string-downcase}, and @coderef{string-capitalize},
@param{string} is not modified.  However, if no characters in @param{string}
require conversion, the result may be either @param{string} or a copy of it,
at the implementation's discretion.

@subsubheading Examples:
@lisp
 (string-upcase "abcde") @EV{} "ABCDE"
 (string-upcase "Dr. Livingston, I presume?")
@EV{} "DR. LIVINGSTON, I PRESUME?"
 (string-upcase "Dr. Livingston, I presume?" :start 6 :end 10)
@EV{} "Dr. LiVINGston, I presume?"
 (string-downcase "Dr. Livingston, I presume?")
@EV{} "dr. livingston, i presume?"

 (string-capitalize "elm 13c arthur;fig don't") @EV{} "Elm 13c Arthur;Fig Don'T"
 (string-capitalize " hello ") @EV{} " Hello "
 (string-capitalize "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION")
@EV{}  "Occluded Casements Forestall Inadvertent Defenestration"
 (string-capitalize 'kludgy-hash-search) @EV{} "Kludgy-Hash-Search"
 (string-capitalize "DON'T!") @EV{} "Don'T!"    ;not "Don't!"
 (string-capitalize "pipe 13a, foo16c") @EV{} "Pipe 13a, Foo16c"

 (setq str (copy-seq "0123ABCD890a")) @EV{} "0123ABCD890a"
 (nstring-downcase str :start 5 :end 7) @EV{} "0123AbcD890a"
 str @EV{} "0123AbcD890a"
@end lisp


@subsubheading Side Effects:

@coderef{nstring-upcase},
@coderef{nstring-downcase},
and @coderef{nstring-capitalize} modify @param{string} as appropriate
rather than constructing a new @term{string}.

@subsubheading See Also:

@ref{char-upcase}, @ref{char-downcase}

@subsubheading Notes:
The result is always of the same length
as @param{string}.


@node string-trim; string-left-trim; string-right-trim
@subsection string-trim, string-left-trim, string-right-trim (Function)
@syindexanchor{string-trim}
@cindex string-trim
@syindexanchor{string-left-trim}
@cindex string-left-trim
@syindexanchor{string-right-trim}
@cindex string-right-trim


@subsubheading Syntax:
@DefunWithValues{string-trim, character-bag string, trimmed-string}
@DefunWithValues{string-left-trim, character-bag string, trimmed-string}
@DefunWithValues{string-right-trim, character-bag string, trimmed-string}


@subsubheading Arguments and Values:

@param{character-bag}---a @term{sequence} containing @term{characters}.

@param{string}---a @term{string designator}.

@param{trimmed-string}---a @term{string}.

@subsubheading Description:

@coderef{string-trim} returns a substring of @param{string},
with all characters in @param{character-bag} stripped off the beginning and end.
@coderef{string-left-trim} is similar but strips characters off only the beginning;
@coderef{string-right-trim} strips off only the end.

If no @term{characters} need to be trimmed from the @param{string},
then either @param{string} itself or a copy of it may be returned,
at the discretion of the implementation.

All of these @term{functions} observe the @term{fill pointer}.

@subsubheading Examples:
@lisp
 (string-trim "abc" "abcaakaaakabcaaa") @EV{} "kaaak"
 (string-trim '(#@bsl{}Space #@bsl{}Tab #@bsl{}Newline) " garbanzo beans
        ") @EV{} "garbanzo beans"
 (string-trim " (*)" " ( *three (silly) words* ) ")
@EV{} "three (silly) words"

 (string-left-trim "abc" "labcabcabc") @EV{} "labcabcabc"
 (string-left-trim " (*)" " ( *three (silly) words* ) ")
@EV{} "three (silly) words* ) "

 (string-right-trim " (*)" " ( *three (silly) words* ) ")
@EV{} " ( *three (silly) words"
@end lisp

@subsubheading Affected By:

The @term{implementation}.


@node string=; string/=; string<; string>; string<=; string>=; string-equal; +
@subsection string=, string/=, string<, string>, string<=, string>=, string-equal, string-not-equal, string-lessp, string-greaterp, string-not-greaterp, string-not-lessp (Function)
@syindexanchor{string=}
@cindex string=
@syindexanchor{string/=}
@cindex string/=
@syindexanchor{string<}
@cindex string<
@syindexanchor{string>}
@cindex string>
@syindexanchor{string<=}
@cindex string<=
@syindexanchor{string>=}
@cindex string>=
@syindexanchor{string-equal}
@cindex string-equal
@syindexanchor{string-not-equal}
@cindex string-not-equal
@syindexanchor{string-lessp}
@cindex string-lessp
@syindexanchor{string-greaterp}
@cindex string-greaterp
@syindexanchor{string-not-greaterp}
@cindex string-not-greaterp
@syindexanchor{string-not-lessp}
@cindex string-not-lessp
@anchor{string=}
@anchor{string-equal}


@subsubheading Syntax:

@DefunWithValues{string@mat{=}, string1 string2 @keyparam{} start1 end1 start2 end2, generalized-boolean}

@DefunWithValues{string/@mat{=}, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string@mat{<}, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string@mat{>}, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string@mat{<=}, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string@mat{>=}, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}


@DefunWithValues{string-equal, string1 string2 @keyparam{} start1 end1 start2 end2, generalized-boolean}

@DefunWithValues{string-not-equal, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string-lessp, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string-greaterp, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string-not-greaterp, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string-not-lessp, string1 string2 @keyparam{} start1 end1 start2 end2, mismatch-index}


@subsubheading Arguments and Values:

@param{string1}---a @term{string designator}.

@param{string2}---a @term{string designator}.

@param{start1}, @param{end1}---@term{bounding index designators} of @param{string1}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{start2}, @param{end2}---@term{bounding index designators} of @param{string2}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{generalized-boolean}---a @term{generalized boolean}.

@param{mismatch-index}---a @term{bounding index} of @param{string1}, or @nil{}.

@subsubheading Description:

These functions perform lexicographic comparisons on @param{string1} and @param{string2}.
@coderef{string=} and @coderef{string-equal} are called equality functions;
the others are called inequality functions.
The comparison operations these @term{functions} perform are restricted
to the subsequence of @param{string1} @term{bounded} by @term{start1} and @param{end1}
and to the subsequence of @param{string2} @term{bounded} by @term{start2} and @param{end2}.

A string @i{a} is equal to a string @i{b} if it contains the same number
of characters, and the corresponding characters are the @term{same}
under @coderef{char=} or @coderef{char-equal}, as appropriate.

A string @i{a} is less than a string @i{b} if in the first position in
which they differ the character of @i{a} is less than the corresponding
character of @i{b} according to @coderef{char<} or @coderef{char-lessp}
as appropriate, or if string @i{a} is a proper prefix of string @i{b}
(of shorter length and matching in all the characters of @i{a}).

The equality functions return a @param{generalized boolean}
that is @term{true} if the strings are equal,
or @term{false} otherwise.

The inequality functions return a @param{mismatch-index}
that is @term{true} if the strings are not equal,
or @term{false} otherwise.
When the @param{mismatch-index} is @term{true},
it is an @term{integer} representing the first character position at which the
two substrings differ, as an offset from the beginning of @param{string1}.

The comparison has one of the following results:


@table @asis

@item @id{@coderef{string=}}


@coderef{string=} is @term{true} if the supplied substrings are of
the same length and contain the @term{same} characters in corresponding
positions; otherwise it is @term{false}.

@item @id{@coderef{string/=}}


@coderef{string/=} is @term{true} if the supplied substrings are
different; otherwise it is @term{false}.

@item @id{@coderef{string-equal}}


@coderef{string-equal} is just like @coderef{string=}
except that differences in case are ignored;
two characters are considered to be the same if @coderef{char-equal} is @term{true} of them.

@item @id{@coderef{string<}}


@coderef{string<} is @term{true} if substring1 is less than substring2;
otherwise it is @term{false}.

@item @id{@coderef{string>}}


@coderef{string>} is @term{true} if substring1 is greater than substring2;
otherwise it is @term{false}.

@item @id{@coderef{string-lessp}, @coderef{string-greaterp}}


@coderef{string-lessp} and @coderef{string-greaterp}
are exactly like @coderef{string<} and @coderef{string>}, respectively,
except that distinctions between uppercase and lowercase letters are ignored.
It is as if @coderef{char-lessp} were used instead of @coderef{char<}
for comparing characters.

@item @id{@coderef{string<=}}


@coderef{string<=} is @term{true} if substring1 is less than or equal to substring2;
otherwise it is @term{false}.

@item @id{@coderef{string>=}}


@coderef{string>=} is @term{true} if substring1 is greater than or equal to substring2;
otherwise it is @term{false}.

@item @id{@coderef{string-not-greaterp}, @coderef{string-not-lessp}}


@coderef{string-not-greaterp} and @coderef{string-not-lessp}
are exactly like @coderef{string<=} and @coderef{string>=}, respectively,
except that distinctions between uppercase and lowercase letters are ignored.
It is as if @coderef{char-lessp} were used instead of @coderef{char<}
for comparing characters.
@end table



@subsubheading Examples:

@lisp
 (string= "foo" "foo") @EV{} @term{true}
 (string= "foo" "Foo") @EV{} @term{false}
 (string= "foo" "bar") @EV{} @term{false}
 (string= "together" "frog" :start1 1 :end1 3 :start2 2) @EV{} @term{true}
 (string-equal "foo" "Foo") @EV{} @term{true}
 (string= "abcd" "01234abcd9012" :start2 5 :end2 9) @EV{} @term{true}
 (string< "aaaa" "aaab") @EV{} 3
 (string>= "aaaaa" "aaaa") @EV{} 4
 (string-not-greaterp "Abcde" "abcdE") @EV{} 5
 (string-lessp "012AAAA789" "01aaab6" :start1 3 :end1 7
                                      :start2 2 :end2 6) @EV{} 6
 (string-not-equal "AAAA" "aaaA") @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{char=}

@subsubheading Notes:

@coderef{equal} calls @coderef{string=} if applied to two @term{strings}.


@node stringp
@subsection stringp (Function)
@syindexanchor{stringp}
@cindex stringp


@subsubheading Syntax:

@DefunWithValues{stringp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, string}

@subsubheading Examples:

@lisp
 (stringp "aaaaaa") @EV{} @term{true}
 (stringp #@bsl{}a) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{typep},
@ref{string (System Class)} (@term{type})

@subsubheading Notes:

@lisp
 (stringp @param{object}) @EQ{} (typep @param{object} 'string)
@end lisp



@node make-string
@subsection make-string (Function)
@syindexanchor{make-string}
@cindex make-string


@subsubheading Syntax:

@DefunWithValues{make-string, size @keyparam{} initial-element element-type, string}

@subsubheading Arguments and Values:

@param{size}---a @term{valid array dimension}.

@param{initial-element}---a @term{character}.
@Default{@term{implementation-dependent}}

@param{element-type}---a @term{type specifier}.
@Default{@coderef{character}}

@param{string}---a @term{simple string}.

@subsubheading Description:

@coderef{make-string} returns a @term{simple string} of length @param{size}
whose elements have been initialized to @param{initial-element}.

The @param{element-type} names the @term{type} of the @term{elements} of the @term{string};
a @term{string} is constructed of the most @term{specialized}
@term{type} that can accommodate @term{elements} of the given @term{type}.

@subsubheading Examples:

@lisp
 (make-string 10 :initial-element #@bsl{}5) @EV{} "5555555555"
 (length (make-string 10)) @EV{} 10
@end lisp


@subsubheading Affected By:

The @term{implementation}.
