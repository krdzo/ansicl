@node Iteration
@chapter Iteration
@menu
* The LOOP Facility::
* Iteration Dictionary::
@end menu

@node The LOOP Facility
@section The LOOP Facility

@menu
* Overview of the Loop Facility::
* Variable Initialization and Stepping Clauses::
* Value Accumulation Clauses::
* Termination Test Clauses::
* Unconditional Execution Clauses::
* Conditional Execution Clauses::
* Miscellaneous Clauses::
* Examples of Miscellaneous Loop Features::
* Notes about Loop::
@end menu
@node Overview of the Loop Facility
@subsection Overview of the Loop Facility

@Themacro{loop} performs iteration.

@node Simple vs Extended Loop
@subsubsection Simple vs Extended Loop

@symbolref{loop, SYM} @term{forms} are partitioned into two categories:
simple @symbolref{loop, SYM} @term{forms}
and extended @symbolref{loop, SYM} @term{forms}.

@node Simple Loop
@subsubsection Simple Loop


A simple @symbolref{loop, SYM} @term{form} is one that has a body containing
only @term{compound forms}.
Each @term{form} is @term{evaluated} in turn from left to right.
When the last @param{form} has been @term{evaluated},
then the first @param{form} is evaluated again, and so on, in a never-ending cycle.
A simple @symbolref{loop, SYM} @term{form} establishes an @term{implicit block} named @nil{}.
The execution of a simple @symbolref{loop, SYM} can be terminated by explicitly
transfering control to the @term{implicit block} (using @symbolref{return, SYM} or
@symbolref{return-from, SYM}) or to some @term{exit point} outside of the @term{block}
(@eg{} using @symbolref{throw, SYM}, @symbolref{go, SYM}, or @symbolref{return-from, SYM}).

@node Extended Loop
@subsubsection Extended Loop


An extended @symbolref{loop, SYM} @term{form} is one that has a body containing
@term{atomic} @term{expressions}.  When @themacro{loop} processes such a
@term{form}, it invokes a facility that is commonly called ``the Loop Facility.''

The Loop Facility provides standardized access to mechanisms commonly used
in iterations through Loop schemas, which are introduced by @term{loop keywords}.

The body of an extended @symbolref{loop, SYM} @term{form} is divided into @symbolref{loop, SYM} clauses,
each which is in turn made up of @term{loop keywords} and @term{forms}.



@node Loop Keywords
@subsubsection Loop Keywords

@term{Loop keywords} are not true @term{keywords}@sub{1};
they are special @term{symbols}, recognized by @term{name} rather than @term{object} identity,
that are meaningful only to the @symbolref{loop, SYM} facility.
A @term{loop keyword} is a @term{symbol} but is recognized by its @term{name}
(not its identity), regardless of the @term{packages} in which it is @term{accessible}.

In general, @term{loop keywords} are not @term{external symbols} of the @code{COMMON-LISP} @term{package},
except in the coincidental situation that a @term{symbol} with the same name as a
@term{loop keyword} was needed for some other purpose in @clisp{}.  For example,
there is a @term{symbol} in the @code{COMMON-LISP} @term{package} whose @term{name} is @f{"UNLESS"} but
not one whose @term{name} is @f{"UNTIL"}.

If no @term{loop keywords} are supplied in a @symbolref{loop, SYM} @term{form},
the Loop Facility executes the loop body repeatedly; see @ref{Simple Loop}.


@node Parsing Loop Clauses
@subsubsection Parsing Loop Clauses

The syntactic parts of an extended @symbolref{loop, SYM} @term{form} are called clauses;
the rules for parsing are determined by
that clause's keyword.
The following example shows a @symbolref{loop, SYM} @term{form} with six clauses:

@lisp
 (loop for i from 1 to (compute-top-value)       ; first clause
       while (not (unacceptable i))              ; second clause
       collect (square i)                        ; third clause
       do (format t "Working on ~D now" i)       ; fourth clause
       when (evenp i)                            ; fifth clause
         do (format t "~D is a non-odd number" i)
       finally (format t "About to exit!"))      ; sixth clause
@end lisp


Each @term{loop keyword} introduces
either a compound loop clause or a simple loop clause
that can consist of a @term{loop keyword} followed by a single @term{form}.
The number of @term{forms} in a clause is determined by the @term{loop keyword}
that begins the clause and by the auxiliary keywords in the clause.
The keywords @loopref{do},
@loopref{doing},
@loopref{initially}, and @loopref{finally}
are the only loop keywords that can take any number of @term{forms} and
group them as an @term{implicit progn}.

Loop clauses can contain auxiliary keywords, which are sometimes
called prepositions.  For example, the first clause in the code
above includes the prepositions @loopref{from} and @loopref{to},
which mark the value from which stepping begins and the value at which stepping
ends.

For detailed information about @symbolref{loop, SYM} syntax,
see the @term{macro} @ref{loop}.


@node Expanding Loop Forms
@subsubsection Expanding Loop Forms

A @symbolref{loop, SYM} @term{macro form} expands into a @term{form} containing
one or more binding forms (that @term{establish} @term{bindings} of loop variables)
and a @symbolref{block, SYM} and a @symbolref{tagbody, SYM} (that express a looping control
structure). The variables established in @symbolref{loop, SYM} are bound as
if by @symbolref{let, SYM} or @t{lambda}.

Implementations can interleave the setting of initial values with the @term{bindings}.
However, the assignment of the initial values is always calculated in the order
specified by the user.  A variable is thus sometimes bound to a meaningless value
of the correct @term{type}, and then later in the prologue it is set to the true
initial value by using @symbolref{setq, SYM}.
One implication of this interleaving is that it is @term{implementation-dependent}
whether the @term{lexical environment} in which the initial value @term{forms}
(variously called the @param{form1}, @param{form2}, @param{form3}, @param{step-fun},
@param{vector}, @param{hash-table}, and @param{package}) in any @param{for-as-subclause},
except @param{for-as-equals-then},
are @term{evaluated} includes only the loop variables preceding that @term{form}
or includes more or all of the loop variables;
the @param{form1} and @param{form2} in a @param{for-as-equals-then} form
includes the @term{lexical environment} of all the loop variables.

After the @term{form} is expanded, it consists of three basic parts in the
@symbolref{tagbody, SYM}:
the loop prologue,
the loop body,
and the loop epilogue.


@table @asis
@item @id{@b{Loop prologue}}


The loop prologue contains @term{forms}
that are executed before iteration begins, such as
any automatic variable initializations prescribed
by the @param{variable} clauses, along with any @loopref{initially} clauses
in the order they appear in the source.

@item @id{@b{Loop body}}


The loop body contains those @term{forms} that are executed during iteration,
including application-specific calculations, termination tests,
and variable @i{stepping}@sub{1}.

@item @id{@b{Loop epilogue}}


The loop epilogue contains @term{forms} that are executed after iteration
terminates, such as @loopref{finally} clauses, if any, along
with any implicit return value from an @param{accumulation} clause or
an @param{termination-test} clause.
@end table


Some clauses from the source @term{form}
contribute code only to the loop prologue; these clauses must
come before other clauses that are in the main body of the @symbolref{loop, SYM} form.
Others contribute code only to the loop epilogue.
All other clauses contribute to the final
translated @term{form} in the same
order given in the original source @term{form} of the @symbolref{loop, SYM}.

Expansion of the @symbolref{loop, SYM} macro produces an @term{implicit block} named @nil{}@spc{}
unless @loopref{named} is supplied.
Thus, @symbolref{return-from, SYM} (and sometimes @symbolref{return, SYM})
can be used to return values from @symbolref{loop, SYM} or to exit @symbolref{loop, SYM}.


@node Summary of Loop Clauses
@subsubsection Summary of Loop Clauses

Loop clauses fall into one of the following categories:

@node Summary of Variable Initialization and Stepping Clauses
@subsubsection Summary of Variable Initialization and Stepping Clauses


The @loopref{for} and @loopref{as} constructs provide iteration control clauses
that establish a variable to be initialized.
@loopref{for} and @loopref{as} clauses can be combined with the loop
keyword @loopref{and} to get @term{parallel} initialization and @i{stepping}@sub{1}.
Otherwise, the initialization and @i{stepping}@sub{1} are @term{sequential}.

The @loopref{with} construct is similar to a single @symbolref{let, SYM} clause.
@loopref{with} clauses can be combined using the @term{loop keyword} @loopref{and}
to get @term{parallel} initialization.

For more information, see @ref{Variable Initialization and Stepping Clauses}.


@node Summary of Value Accumulation Clauses
@subsubsection Summary of Value Accumulation Clauses


The @loopref{collect} (or @loopref{collecting}) construct
takes one @term{form} in its clause
and adds the value of that @term{form} to the end of a @term{list}
of values.  By default, the @term{list} of values is returned
when the @symbolref{loop, SYM} finishes.

The @loopref{append} (or @loopref{appending}) construct
takes one @term{form} in its clause
and appends the value of that @term{form} to the end of a @term{list}
of values.  By default, the @term{list} of values is returned when the
@symbolref{loop, SYM} finishes.

The @loopref{nconc} (or @loopref{nconcing}) construct
is similar to the @loopref{append} construct,
but its @term{list} values are concatenated as if by the function
@loopref{nconc}.  By default, the @term{list} of values is returned when
the @symbolref{loop, SYM} finishes.

The @loopref{sum} (or @loopref{summing}) construct
takes one @term{form} in its clause
that must evaluate to a @term{number} and accumulates the sum of all these
@term{numbers}.  By default, the cumulative sum is returned when the
@symbolref{loop, SYM} finishes.

The @loopref{count} (or @loopref{counting}) construct
takes one @term{form} in its clause
and counts the number of times that the @term{form} evaluates to @term{true}.
By default, the count is returned when the @symbolref{loop, SYM} finishes.

The @loopref{minimize} (or @loopref{minimizing}) construct
takes one @term{form} in its clause
and determines the minimum value obtained by evaluating that @term{form}.
By default, the minimum value is returned when the @symbolref{loop, SYM} finishes.

The @loopref{maximize} (or @loopref{maximizing}) construct
takes one @term{form} in its clause
and determines the maximum value obtained by evaluating that @term{form}.
By default, the maximum value is returned when the @symbolref{loop, SYM} finishes.

For more information, see @ref{Value Accumulation Clauses}.


@node Summary of Termination Test Clauses
@subsubsection Summary of Termination Test Clauses


The @loopref{for} and @loopref{as} constructs provide a termination test
that is determined by the iteration control clause.

The @loopref{repeat} construct causes termination after a specified
number of iterations.
(It uses an internal variable to keep track of the number of iterations.)

The @loopref{while} construct takes one @term{form}, a @param{test},
and terminates the iteration if the @param{test} evaluates to @term{false}.
A @loopref{while} clause is equivalent to the expression
@f{(if (not @param{test}) (loop-finish))}.

The @loopref{until} construct is the inverse of @loopref{while};
it terminates the iteration if the @param{test} evaluates to
any @term{non-nil} value.
An @loopref{until} clause is equivalent to the expression
@hbox{@f{(if @param{test} (loop-finish))}}.

The @loopref{always} construct takes one @term{form} and
terminates the @symbolref{loop, SYM} if the @term{form} ever evaluates to @term{false};
in this case, the @symbolref{loop, SYM} @term{form} returns @nil{}.
Otherwise, it provides a default return value of @symbolref{t, SC}.

The @loopref{never} construct takes one @term{form} and
terminates the @symbolref{loop, SYM} if the @term{form} ever evaluates to @term{true};
in this case, the @symbolref{loop, SYM} @term{form} returns @nil{}.
Otherwise, it provides a default return value of @symbolref{t, SC}.

The @loopref{thereis} construct takes one @term{form} and
terminates the @symbolref{loop, SYM} if the @term{form} ever evaluates to
a @term{non-nil} @term{object};
in this case, the @symbolref{loop, SYM} @term{form} returns that @term{object}.
Otherwise, it provides a default return value of @nil{}.

If multiple termination test clauses are specified,
the @symbolref{loop, SYM} @term{form} terminates if any are satisfied.


For more information, see @ref{Termination Test Clauses}.


@node Summary of Unconditional Execution Clauses
@subsubsection Summary of Unconditional Execution Clauses


The @loopref{do} (or @loopref{doing}) construct evaluates all @term{forms} in its clause.

The @loopref{return} construct takes one
@term{form}. Any @term{values} returned by the @term{form} are
immediately returned by the @symbolref{loop, SYM} form.
It is equivalent to the clause
@f{do (return-from @i{block-name} @i{value})},
where @i{block-name} is the name specified in a @loopref{named}
clause, or @nil{}@spc{}if there is no @loopref{named} clause.

For more information, see @ref{Unconditional Execution Clauses}.


@node Summary of Conditional Execution Clauses
@subsubsection Summary of Conditional Execution Clauses


The @loopref{if} and @loopref{when} constructs take one @term{form} as a test
and a clause that is executed when the test @term{yields} @term{true}.
The clause can be a value accumulation, unconditional, or
another conditional clause; it can also be any combination
of such clauses connected by @theloopkeyword{and}.

@Theloopconstruct{unless} is similar to @theloopconstruct{when}
except that it complements the test result.

@Theloopconstruct{else} provides an optional component of @loopref{if},
@loopref{when}, and @loopref{unless} clauses that is executed
when an @loopref{if} or @loopref{when} test @term{yields} @term{false}
or when an @loopref{unless} test @term{yields} @term{true}.
The component is one of the clauses described under @loopref{if}.

@Theloopconstruct{end} provides an optional component to mark the
end of a conditional clause.

For more information, see @ref{Conditional Execution Clauses}.


@node Summary of Miscellaneous Clauses
@subsubsection Summary of Miscellaneous Clauses


@Theloopconstruct{named} gives a name for the @term{block} of the loop.

@Theloopconstruct{initially} causes its @term{forms} to be
evaluated in the loop prologue, which precedes all @symbolref{loop, SYM} code
except for initial settings supplied by the constructs @loopref{with},
@loopref{for}, or @loopref{as}.

@Theloopconstruct{finally} causes its @term{forms} to
be evaluated in the loop epilogue after normal iteration terminates.

For more information, see @ref{Miscellaneous Clauses}.



@node Order of Execution
@subsubsection Order of Execution


With the exceptions listed below, clauses are executed in the loop body
in the order in which they appear in the source.  Execution is repeated
until a clause
terminates the @symbolref{loop, SYM} or until a @symbolref{return, SYM}, @symbolref{go, SYM},
or @symbolref{throw, SYM} form is encountered
which transfers control to a point outside of the loop.
The following actions are
exceptions to the linear order of execution:


@itemize @bullet{}

@item  All variables are initialized first,
regardless of where the establishing clauses appear in the
source.  The order of initialization follows the order of these clauses.

@item  The code for any @loopref{initially} clauses is collected
into one @symbolref{progn, SYM} in the order in which the clauses appear in
the source.  The collected code is executed once in the loop prologue
after any implicit variable initializations.

@item    The code for any @loopref{finally} clauses is collected
into one @symbolref{progn, SYM} in the order in which the clauses appear in
the source.  The collected code is executed once in the loop epilogue
before any implicit values from the accumulation clauses are returned.
Explicit returns anywhere in the source, however, will exit the
@symbolref{loop, SYM} without executing the epilogue code.

@item  A @loopref{with} clause introduces a variable @term{binding}
and an optional initial value.  The initial values are calculated
in the order in which the @loopref{with} clauses occur.

@item
Iteration control clauses implicitly perform the following actions:


@itemize --
@item  initialize variables;

@item  @term{step} variables, generally
between each execution of the loop body;

@item perform termination tests,
generally just before the execution of the
loop body.
@end itemize
@end itemize



@node Destructuring
@subsubsection Destructuring

The @param{d-type-spec} argument is used for destructuring.
If the
@param{d-type-spec} argument consists solely of @thetype{fixnum},
@code{float}, @symbolref{t, SC}, or @nil{}, the @loopref{of-type} keyword is optional.
The @loopref{of-type} construct is optional in these cases to provide backwards
compatibility; thus, the following two expressions are the same:

@lisp
;;; This expression uses the old syntax for type specifiers.
 (loop for i fixnum upfrom 3 ...)

;;; This expression uses the new syntax for type specifiers.
 (loop for i of-type fixnum upfrom 3 ...)

;; Declare X and Y to be of type VECTOR and FIXNUM respectively.
 (loop for (x y) of-type (vector fixnum)
       in l do ...)
@end lisp


A @term{type specifier} for a destructuring pattern is a @term{tree} of
@term{type specifiers} with the same shape as the @term{tree} of
@term{variable} @term{names}, with the following exceptions:


@itemize @bullet{}
@item
When aligning the @term{trees}, an @term{atom} in the
@term{tree} of @term{type specifiers} that matches a @term{cons}
in the variable tree declares the same @term{type} for each variable
in the subtree rooted at the @term{cons}.

@item
A @term{cons} in the @term{tree} of @term{type specifiers} that
matches an @term{atom} in the @term{tree} of @term{variable} @term{names}
is a @i{compound type specifer}.
@end itemize


Destructuring allows @term{binding} of a set of variables to a corresponding
set of values anywhere that a value can normally be bound to a single
variable.  During @symbolref{loop, SYM} expansion,
each variable in the variable list
is matched with the values in the values list.  If there are more variables
in the variable list than there are values in the values list, the
remaining variables are given a value of @nil{}.  If there are more
values than variables listed, the extra values are discarded.


To assign values from a list to the variables @f{a},
@f{b}, and @f{c}, the @loopref{for} clause could be used to
bind the variable @f{numlist} to the
@term{car} of the supplied @param{form},
and then another @loopref{for} clause could be used to bind the variables
@f{a}, @f{b}, and @f{c} @term{sequentially}.

@lisp
;; Collect values by using FOR constructs.
 (loop for numlist in '((1 2 4.0) (5 6 8.3) (8 9 10.4))
       for a of-type integer = (first numlist)
       and b of-type integer = (second numlist)
       and c of-type float = (third numlist)
       collect (list c b a))
@EV{} ((4.0 2 1) (8.3 6 5) (10.4 9 8))
@end lisp


Destructuring makes this process easier by allowing the variables to
be bound in each loop iteration.
@term{Types} can be declared by using a
list of @param{type-spec} arguments.  If
all the @term{types}
are the same, a shorthand destructuring syntax can be used, as the second
example illustrates.

@lisp
;; Destructuring simplifies the process.
 (loop for (a b c) of-type (integer integer float) in
       '((1 2 4.0) (5 6 8.3) (8 9 10.4))
       collect (list c b a))
@EV{} ((4.0 2 1) (8.3 6 5) (10.4 9 8))


;; If all the types are the same, this way is even simpler.
 (loop for (a b c) of-type float in
       '((1.0 2.0 4.0) (5.0 6.0 8.3) (8.0 9.0 10.4))
       collect (list c b a))
@EV{} ((4.0 2.0 1.0) (8.3 6.0 5.0) (10.4 9.0 8.0))
@end lisp




If destructuring is used to declare or initialize a number of groups
of variables into @term{types}, the @term{loop keyword} @loopref{and} can be used
to simplify the process further.
@lisp
;; Initialize and declare variables in parallel by using the AND construct.
 (loop with (a b) of-type float = '(1.0 2.0)
       and (c d) of-type integer = '(3 4)
       and (e f)
       return (list a b c d e f))
@EV{} (1.0 2.0 3 4 NIL NIL)
@end lisp



If @nil{}@spc{}is used in a destructuring list, no variable is provided for
its place.

@lisp
 (loop for (a nil b) = '(1 2 3)
       do (return (list a b)))
@EV{} (1 3)
@end lisp


Note that
@term{dotted lists}
can specify destructuring.

@lisp
 (loop for (x . y) = '(1 . 2)
       do (return y))
@EV{} 2
 (loop for ((a . b) (c . d)) of-type ((float . float) (integer . integer)) in
       '(((1.2 . 2.4) (3 . 4)) ((3.4 . 4.6) (5 . 6)))
       collect (list a b c d))
@EV{} ((1.2 2.4 3 4) (3.4 4.6 5 6))
@end lisp


An error @oftype{program-error} is signaled (at macro expansion time)
if the same variable is bound twice in any variable-binding
clause of a single @symbolref{loop, SYM} expression.  Such variables include
local variables, iteration control variables, and variables found by
destructuring.


@node Restrictions on Side-Effects
@subsubsection Restrictions on Side-Effects

See @ref{Traversal Rules and Side Effects}.



@node Variable Initialization and Stepping Clauses
@subsection Variable Initialization and Stepping Clauses

@node Iteration Control
@subsubsection Iteration Control

Iteration control clauses allow direction of @symbolref{loop, SYM} iteration.
The @term{loop keywords} @loopref{for} and @loopref{as}
designate iteration control clauses.
Iteration control clauses differ with respect to the specification of
termination tests and to the initialization and @i{stepping}@sub{1}
of loop variables.  Iteration clauses by themselves
do not cause the Loop Facility to return values, but they
can be used in conjunction with value-accumulation clauses to
return values.

All variables are initialized in the loop prologue.
A @term{variable} @term{binding} has @term{lexical scope}
unless it is proclaimed @symbolref{special, SYM};
thus, by default, the variable can be @term{accessed} only by @term{forms}
that lie textually within the @symbolref{loop, SYM}.
Stepping assignments are made in the loop body before any other @term{forms}
are evaluated in the body.

The variable argument in iteration control clauses can be a
destructuring list.  A destructuring list
is a @term{tree} whose @term{non-nil} @term{atoms} are @term{variable} @term{names}.
See @ref{Destructuring}.

The iteration control clauses @loopref{for}, @loopref{as},  and @loopref{repeat}
must precede any other loop clauses, except
@loopref{initially}, @loopref{with}, and @loopref{named},
since they establish variable @term{bindings}.
When iteration control clauses are
used in a @symbolref{loop, SYM},
the corresponding
termination tests in the loop body are evaluated
before any other loop body code is executed.


If multiple iteration clauses are used to control iteration, variable
initialization and @i{stepping}@sub{1} occur @term{sequentially} by default.
The @loopref{and} construct can be used to connect two or more
iteration clauses when @term{sequential} @term{binding} and
@i{stepping}@sub{1} are not necessary.
The iteration behavior of clauses joined by @loopref{and}
is analogous to the behavior of the macro @symbolref{do, SYM} with
respect to @symbolref{do*, SYM}.

The @loopref{for} and @loopref{as} clauses iterate by using one or more local
loop  variables that are initialized to some value and that
can be modified or @i{stepped}@sub{1} after each iteration.
For these clauses, iteration terminates when a local
variable reaches some supplied value or when some other loop clause
terminates iteration.
At each iteration, variables can be
@i{stepped}@sub{1} by an increment or a decrement
or can be assigned a new value by the evaluation of a @term{form}).
Destructuring can be used to assign
values to variables during iteration.

The @loopref{for} and @loopref{as} keywords are synonyms; they can be used
interchangeably.  There are seven syntactic formats for these constructs.
In each syntactic format, the @term{type} of
@param{var} can be supplied by the optional @param{type-spec}
argument.  If @param{var} is a destructuring list, the @term{type}
supplied by the @param{type-spec} argument must appropriately match
the elements of the list.
By convention, @loopref{for} introduces new iterations and @loopref{as}
introduces iterations that depend on a previous iteration specification.

@node The for-as-arithmetic subclause
@subsubsection The for-as-arithmetic subclause


In the @i{for-as-arithmetic} subclause, the @loopref{for}
or @loopref{as} construct iterates from the value supplied by
@param{form1} to the value supplied by @param{form2} in increments or
decrements denoted by @param{form3}. Each
expression is evaluated only once and must evaluate to a @term{number}.
The variable @param{var} is bound to the value of
@param{form1} in the first iteration and is @i{stepped}@sub{1}
by the value of @param{form3} in each succeeding iteration,
or by 1 if @param{form3} is not provided.
The following @term{loop keywords} serve as valid prepositions within this
syntax.
At least one of the
prepositions must be used;
and at most one from each line may be used in a single subclause.


@table @asis

@item @id{@tt{from | downfrom | upfrom}}


@item @id{@tt{to | downto | upto | below | above}}


@item @id{@tt{by}}
@end table


The prepositional phrases in each subclause may appear in any order.
For example, either ``@f{from x by y}'' or ``@f{by y from x}'' is permitted.
However, because left-to-right order of evaluation is preserved,
the effects will be different in the case of side effects.
@cindex order of evaluation
@cindex evaluation order
Consider:

@lisp
(let ((x 1)) (loop for i from x by (incf x) to 10 collect i))
@EV{} (1 3 5 7 9)
(let ((x 1)) (loop for i by (incf x) from x to 10 collect i))
@EV{} (2 4 6 8 10)
@end lisp


The descriptions of the prepositions follow:


@table @asis
@item @id{@tt{from}}


The @term{loop keyword} @loopref{from} specifies the value from which
@i{stepping}@sub{1} begins, as supplied by @param{form1}.
@i{Stepping}@sub{1} is incremental by default.  If
decremental @i{stepping}@sub{1} is desired,
the preposition @loopref{downto}
or @loopref{above} must be used with @param{form2}.  For incremental
@i{stepping}@sub{1}, the default @loopref{from} value is 0.

@item @id{@tt{downfrom, upfrom}}


The @term{loop keyword} @loopref{downfrom}
indicates that the variable @param{var} is decreased in decrements
supplied by @param{form3}; the @term{loop keyword} @loopref{upfrom} indicates that
@param{var} is increased in increments supplied by @param{form3}.

@item @id{@tt{to}}


The @term{loop keyword} @loopref{to} marks the end value
for @i{stepping}@sub{1} supplied in @param{form2}.
@i{Stepping}@sub{1} is incremental by default.
If decremental @i{stepping}@sub{1} is desired,
the preposition @loopref{downfrom} must be used with @param{form1},
or else the preposition @loopref{downto} or @loopref{above} should be used instead
of @loopref{to} with @param{form2}.

@item @id{@tt{downto, upto}}


The @term{loop keyword} @loopref{downto} specifies decremental @i{stepping};
the @term{loop keyword} @loopref{upto} specifies incremental @i{stepping}.
In both cases, the amount of change on each step is specified by @param{form3},
and the @symbolref{loop, SYM} terminates when the variable @param{var} passes
the value of @param{form2}.
Since there is no default for @param{form1} in decremental @i{stepping}@sub{1},
a @param{form1} value must be supplied (using @loopref{from} or @loopref{downfrom})
when @loopref{downto} is supplied.

@item @id{@tt{below, above}}


The @term{loop keywords} @loopref{below} and @loopref{above} are analogous to
@loopref{upto} and @loopref{downto} respectively.  These keywords stop
iteration just before the value of the variable @param{var} reaches the value
supplied by @param{form2}; the end value of @param{form2} is not included.
Since there is no default for @param{form1} in decremental @i{stepping}@sub{1},
a @param{form1} value must be supplied (using @loopref{from} or @loopref{downfrom})
when @loopref{above} is supplied.

@item @id{@tt{by}}


The @term{loop keyword} @loopref{by} marks the increment or decrement supplied by
@param{form3}.  The value of @param{form3} can be any
positive
@term{number}.
The default value is 1.
@end table


In an iteration control clause, the @loopref{for} or @loopref{as} construct
causes termination when the supplied limit is reached.  That is,
iteration continues until the value @param{var} is stepped to the
exclusive or inclusive limit supplied by @param{form2}.  The range is
exclusive if @param{form3} increases or decreases @param{var}
to the value of @param{form2} without reaching that value; the loop
keywords @loopref{below} and @loopref{above} provide exclusive limits.  An
inclusive limit allows @param{var} to attain the value of
@param{form2}; @loopref{to}, @loopref{downto}, and @loopref{upto} provide inclusive
limits.

@node Examples of for-as-arithmetic subclause
@subsubsection Examples of for-as-arithmetic subclause


@lisp
;; Print some numbers.
 (loop for i from 1 to 3
       do (print i))
@OUT{} 1
@OUT{} 2
@OUT{} 3
@EV{} NIL

;; Print every third number.
 (loop for i from 10 downto 1 by 3
       do (print i))
@OUT{} 10
@OUT{} 7
@OUT{} 4
@OUT{} 1
@EV{} NIL

;; Step incrementally from the default starting value.
 (loop for i below 3
       do (print i))
@OUT{} 0
@OUT{} 1
@OUT{} 2
@EV{} NIL
@end lisp




@node The for-as-in-list subclause
@subsubsection The for-as-in-list subclause


In the @i{for-as-in-list} subclause,
the @loopref{for}
or @loopref{as} construct iterates over the contents of a
@term{list}.  It checks for
the end of the @term{list} as if by using @symbolref{endp, SYM}.
The variable @param{var} is bound to the successive elements  of
the @term{list} in @param{form1} before each
iteration.  At the end of each iteration, the function @param{step-fun}
is applied to the @term{list}; the default value for @param{step-fun} is
@symbolref{cdr, SYM}.
The @term{loop keywords} @loopref{in} and @loopref{by} serve as valid prepositions in
this syntax.
The @loopref{for} or @loopref{as} construct causes termination when the
end of the @term{list} is reached.

@node Examples of for-as-in-list subclause
@subsubsection Examples of for-as-in-list subclause


@lisp
;; Print every item in a list.
 (loop for item in '(1 2 3) do (print item))
@OUT{} 1
@OUT{} 2
@OUT{} 3
@EV{} NIL

;; Print every other item in a list.
 (loop for item in '(1 2 3 4 5) by #'cddr
       do (print item))
@OUT{} 1
@OUT{} 3
@OUT{} 5
@EV{} NIL

;; Destructure a list, and sum the x values using fixnum arithmetic.
 (loop for (item . x) of-type (t . fixnum) in '((A . 1) (B . 2) (C . 3))
       unless (eq item 'B) sum x)
@EV{} 4
@end lisp




@node The for-as-on-list subclause
@subsubsection The for-as-on-list subclause


In the @i{for-as-on-list} subclause, the @loopref{for} or @loopref{as}
construct iterates over
a @term{list}. It checks for the
end of the @term{list} as if by using @code{atom}.
The variable @param{var} is bound to the successive tails of the
@term{list} in
@param{form1}.  At the end of each iteration, the function @param{step-fun}
is applied to the @term{list}; the default value for @param{step-fun} is @symbolref{cdr, SYM}.
The @term{loop keywords} @loopref{on} and @loopref{by} serve as valid
prepositions in this syntax.
The @loopref{for} or @loopref{as} construct causes termination when the
end of the @term{list} is reached.

@node Examples of for-as-on-list subclause
@subsubsection Examples of for-as-on-list subclause


@lisp
;; Collect successive tails of a list.
 (loop for sublist on '(a b c d)
       collect sublist)
@EV{} ((A B C D) (B C D) (C D) (D))

;; Print a list by using destructuring with the loop keyword ON.
 (loop for (item) on '(1 2 3)
       do (print item))
@OUT{} 1
@OUT{} 2
@OUT{} 3
@EV{} NIL

@end lisp




@node The for-as-equals-then subclause
@subsubsection The for-as-equals-then subclause


In the @i{for-as-equals-then} subclause
the @loopref{for}
or @loopref{as} construct
initializes the variable @param{var} by setting it to the
result of evaluating @param{form1} on the first iteration, then setting
it to the result of evaluating @param{form2} on the second and
subsequent iterations.  If @param{form2} is omitted, the construct
uses @param{form1} on the second and
subsequent iterations.
The @term{loop keywords} @mat{=} and @loopref{then} serve as valid prepositions
in this syntax.
This construct does not provide any termination tests.

@node Examples of for-as-equals-then subclause
@subsubsection Examples of for-as-equals-then subclause


@lisp
;; Collect some numbers.
 (loop for item = 1 then (+ item 10)
       for iteration from 1 to 5
       collect item)
@EV{} (1 11 21 31 41)
@end lisp




@node The for-as-across subclause
@subsubsection The for-as-across subclause


In the @i{for-as-across} subclause the @loopref{for}
or @loopref{as} construct binds the variable @param{var} to the value of
each element in the array @param{vector}.
The @term{loop keyword} @loopref{across} marks the array @param{vector}; @loopref{across}
is used as a preposition in this syntax.
Iteration stops when there are no more elements in the supplied
@term{array} that can be referenced.
Some implementations might recognize a @symbolref{the, SYM} special form
in the @param{vector} form to produce more efficient code.

@node Examples of for-as-across subclause
@subsubsection Examples of for-as-across subclause


@lisp
 (loop for char across (the simple-string (find-message channel))
       do (write-char char stream))
@end lisp




@node The for-as-hash subclause
@subsubsection The for-as-hash subclause


In the @i{for-as-hash} subclause
the @loopref{for}
or @loopref{as} construct
iterates over the elements, keys, and values of a @i{hash-table}.
In this syntax, a compound preposition is used to designate access to a
@term{hash table}.
The variable @param{var} takes on the value of each hash key
or hash value in the supplied @param{hash-table}.
The following @term{loop keywords} serve as valid prepositions within this syntax:


@table @asis

@item @id{@loopref{being}}


The keyword @loopref{being} introduces either the Loop schema
@loopref{hash-key} or @loopref{hash-value}.

@item @id{@loopref{each}, @loopref{the}}


The @term{loop keyword} @loopref{each}
follows the @term{loop keyword} @loopref{being} when @loopref{hash-key} or
@loopref{hash-value} is used.  The @term{loop keyword} @tt{the} is used with
@loopref{hash-keys} and @loopref{hash-values} only for ease of reading.
This agreement isn't required.

@item @id{@loopref{hash-key}, @loopref{hash-keys}}


These @term{loop keywords} access each key entry of the @term{hash table}.  If
the name @loopref{hash-value} is supplied in a @loopref{using} construct with one
of these Loop schemas, the iteration can optionally access the keyed
value. The order in which the keys are accessed is undefined; empty
slots in the @term{hash table} are ignored.

@item @id{@loopref{hash-value}, @loopref{hash-values}}


These @term{loop keywords} access each value entry of a
@term{hash table}.  If
the name @loopref{hash-key} is supplied in a @loopref{using} construct with one of
these Loop schemas, the iteration can optionally access the key that
corresponds to the value.  The order in which the keys are accessed is
undefined; empty slots in the @term{hash table} are ignored.

@item @id{@loopref{using}}


The @term{loop keyword} @loopref{using} introduces
the optional key or the keyed value to
be accessed.  It allows access to the hash key if iteration is over
the hash values, and the hash value if
iteration is over the hash keys.

@item @id{@loopref{in}, @loopref{of}}


These loop prepositions introduce @param{hash-table}.
@end table


In effect

@loopref{being}
@curly{@loopref{each} | @loopref{the}}
@curly{@loopref{hash-value}  |
@loopref{hash-values} |
@loopref{hash-key}    |
@loopref{hash-keys}}
@curly{@loopref{in} | @loopref{of}}

is a compound preposition.

Iteration stops when there are no more hash keys or hash values to be
referenced in the supplied @param{hash-table}.


@node The for-as-package subclause
@subsubsection The for-as-package subclause


In the @i{for-as-package} subclause
the @loopref{for}
or @loopref{as} construct
iterates over the @term{symbols} in a @term{package}.
In this syntax, a compound preposition is used to designate access to a
@term{package}.
The variable @param{var} takes on the value of each @term{symbol}
in the supplied @term{package}.
The following @term{loop keywords} serve as valid prepositions within this syntax:


@table @asis

@item @id{@loopref{being}}


The keyword @loopref{being} introduces either the Loop schema
@loopref{symbol}, @loopref{present-symbol},  or @loopref{external-symbol}.

@item @id{@loopref{each}, @loopref{the}}


The @term{loop keyword} @loopref{each}
follows the @term{loop keyword} @loopref{being} when @loopref{symbol},
@loopref{present-symbol}, or @loopref{external-symbol} is used.
The @term{loop keyword} @loopref{the} is used with @loopref{symbols},
@loopref{present-symbols}, and @loopref{external-symbols} only for ease of reading.
This agreement isn't required.

@item @id{@loopref{present-symbol}, @loopref{present-symbols}}


These Loop schemas iterate over the @term{symbols}
that are @term{present} in a @term{package}.
The @param{package} to be iterated over is supplied in the same way
that @term{package} arguments to @symbolref{find-package, SYM} are supplied.
If the @param{package} for the iteration is not supplied,
the @term{current package} is used.
If a @param{package} that does not exist is supplied,
an error @oftype{package-error} is signaled.

@item @id{@loopref{symbol}, @loopref{symbols}}


These Loop schemas iterate over @term{symbols} that are
@term{accessible} in a given @param{package}.
The @param{package} to be iterated over is supplied in the same way
that @term{package} arguments to @symbolref{find-package, SYM} are supplied.
If the @param{package} for the iteration is not supplied,
the @term{current package} is used.
If a @param{package} that does not exist is supplied,
an error @oftype{package-error} is signaled.

@item @id{@loopref{external-symbol}, @loopref{external-symbols}}


These Loop schemas iterate over the @term{external symbols} of a @param{package}.
The @param{package} to be iterated over is supplied in the same way
that @term{package} arguments to @symbolref{find-package, SYM} are supplied.
If the @param{package} for the iteration is not supplied,
the @term{current package} is used.
If a @param{package} that does not exist is supplied,
an error @oftype{package-error} is signaled.

@item @id{@loopref{in}, @loopref{of}}


These loop prepositions introduce @param{package}.
@end table


In effect

@loopref{being}
@curly{@loopref{each} | @loopref{the}}
@curly{@loopref{symbol}          |
@loopref{symbols}         |
@loopref{present-symbol}  |
@loopref{present-symbols} |
@loopref{external-symbol} |
@loopref{external-symbols}}
@curly{@loopref{in} | @loopref{of}}

is a compound preposition.

Iteration stops when there are no more @term{symbols} to be referenced
in the supplied @param{package}.

@node Examples of for-as-package subclause
@subsubsection Examples of for-as-package subclause


@lisp
 (let ((*package* (make-package "TEST-PACKAGE-1")))
   ;; For effect, intern some symbols
   (read-from-string "(THIS IS A TEST)")
   (export (intern "THIS"))
   (loop for x being each present-symbol of *package*
          do (print x)))
@OUT{} A
@OUT{} TEST
@OUT{} THIS
@OUT{} IS
@EV{} NIL
@end lisp





@node Local Variable Initializations
@subsubsection Local Variable Initializations

When a @symbolref{loop, SYM} @term{form} is executed, the local variables are bound and are
initialized to some value.  These local variables exist until @symbolref{loop, SYM}
iteration terminates, at which point they cease to exist.
Implicit variables are also established by iteration control clauses and the
@loopref{into} preposition of accumulation clauses.

The @loopref{with} construct initializes variables that are local to
a loop.  The variables are initialized one time only.
If the optional @param{type-spec} argument is supplied for the variable
@param{var}, but there is no related expression to be evaluated, @param{var}
is initialized to an appropriate default value for its @term{type}.
For example, for the types @symbolref{t, SC}, @symbolref{number, SYM},
and @code{float},
the default values are @nil{}, @f{0}, and @f{0.0} respectively.
The consequences are undefined if a
@param{type-spec} argument is supplied for @param{var} if
the related expression returns a value that is not of the supplied
@term{type}.
By default, the @loopref{with} construct initializes variables
@term{sequentially}; that is, one variable is assigned a value before the
next expression is evaluated.  However, by using the @term{loop keyword} @loopref{and}
to join several @loopref{with} clauses,
initializations can be forced to occur in @term{parallel}; that
is, all of the supplied
@param{forms} are evaluated, and the results are bound to the respective
variables simultaneously.

@term{Sequential} @term{binding} is used when it is desireable for the initialization of
some variables to depend on the values of previously bound variables.
For example, suppose the variables @f{a}, @f{b}, and @f{c} are to be bound in sequence:

@lisp
 (loop with a = 1
       with b = (+ a 2)
       with c = (+ b 3)
       return (list a b c))
@EV{} (1 3 6)
@end lisp


The execution of the above @symbolref{loop, SYM} is equivalent to the execution of
the following code:

@lisp
 (block nil
   (let* ((a 1)
          (b (+ a 2))
          (c (+ b 3)))
     (tagbody
         (next-loop (return (list a b c))
                    (go next-loop)
                    end-loop))))
@end lisp


If the values of previously bound variables are not needed
for the initialization of other local variables, an
@loopref{and} clause can be used to
specify that the bindings are to occur in @term{parallel}:

@lisp
 (loop with a = 1
       and b = 2
       and c = 3
       return (list a b c))
@EV{} (1 2 3)
@end lisp


The execution of the above loop is equivalent to the execution of
the following code:

@lisp
 (block nil
   (let ((a 1)
         (b 2)
         (c 3))
     (tagbody
         (next-loop (return (list a b c))
                    (go next-loop)
                    end-loop))))
@end lisp


@node Examples of WITH clause
@subsubsection Examples of WITH clause


@lisp
;; These bindings occur in sequence.
 (loop with a = 1
       with b = (+ a 2)
       with c = (+ b 3)
       return (list a b c))
@EV{} (1 3 6)

;; These bindings occur in parallel.
 (setq a 5 b 10)
@EV{} 10
 (loop with a = 1
       and b = (+ a 2)
       and c = (+ b 3)
       return (list a b c))
@EV{} (1 7 13)

;; This example shows a shorthand way to declare local variables
;; that are of different types.
 (loop with (a b c) of-type (float integer float)
       return (format nil "~A ~A ~A" a b c))
@EV{} "0.0 0 0.0"

;; This example shows a shorthand way to declare local variables
;; that are the same type.
 (loop with (a b c) of-type float
       return (format nil "~A ~A ~A" a b c))
@EV{} "0.0 0.0 0.0"
@end lisp





@node Value Accumulation Clauses
@subsection Value Accumulation Clauses


The constructs @loopref{collect}, @loopref{collecting},
@loopref{append}, @loopref{appending},
@loopref{nconc}, @loopref{nconcing},
@loopref{count}, @loopref{counting},
@loopref{maximize}, @loopref{maximizing},
@loopref{minimize}, @loopref{minimizing},
@loopref{sum}, and @loopref{summing},
allow values to be accumulated in a @symbolref{loop, SYM}.



The constructs @loopref{collect},
@loopref{collecting}, @loopref{append}, @loopref{appending},
@loopref{nconc}, and @loopref{nconcing},
designate clauses that
accumulate values in @term{lists} and return them.
The constructs @loopref{count}, @loopref{counting},
@loopref{maximize}, @loopref{maximizing}, @loopref{minimize}, @loopref{minimizing},
@loopref{sum}, and @loopref{summing} designate clauses that accumulate and
return numerical values.

During each iteration,  the constructs
@loopref{collect} and @loopref{collecting}
collect the value of the supplied
@param{form} into a @term{list}.
When iteration terminates, the @term{list} is returned.
The argument @param{var} is
set to the @term{list}
of collected values; if @param{var} is supplied, the @symbolref{loop, SYM}
does not return the final @term{list} automatically.  If
@param{var} is not
supplied, it is equivalent to supplying an internal name for
@param{var} and returning its value in a @loopref{finally} clause.
The @param{var} argument
is bound as if by the construct @loopref{with}.
No mechanism is provided for declaring the @term{type} of @param{var};
it must be @oftype{list}.


The constructs @loopref{append}, @loopref{appending},
@loopref{nconc}, and  @loopref{nconcing}
are similar to @loopref{collect} except that the
values of the supplied @param{form} must be @term{lists}.


@itemize @bullet{}
@item
The @loopref{append} keyword causes its @term{list} values to be concatenated
into a single @term{list}, as if
they were arguments to @thefunction{append}.

@item
The @loopref{nconc} keyword causes its @term{list} values to be concatenated
into a single @term{list},
as if they were arguments to @thefunction{nconc}.
@end itemize


The argument @param{var} is
set to the @term{list} of
concatenated values; if @param{var} is supplied,
@symbolref{loop, SYM}
does not return the final @term{list} automatically.
The @param{var} argument
is bound as if by the construct @loopref{with}.
A @term{type} cannot be supplied for @param{var};
it must be @oftype{list}.
The construct @loopref{nconc}
destructively modifies its argument @term{lists}.

The @loopref{count} construct counts the number of times
that the supplied @param{form} returns @term{true}.
The argument @param{var} accumulates the number of occurrences;
if @param{var} is supplied,
@symbolref{loop, SYM} does not return the final count automatically.
The @param{var} argument is bound as if by the construct @loopref{with}
to a zero of the appropriate type.
Subsequent values (including any necessary coercions)
are computed as if by the function @symbolref{1+, SYM}.
If @loopref{into} @param{var} is used,
a @term{type} can be supplied  for @param{var} with the @param{type-spec} argument;
the consequences are unspecified if a nonnumeric @term{type} is supplied.
If there is no @loopref{into} variable,
the optional @param{type-spec} argument
applies to the internal variable that is keeping the count.
The default @term{type} is @term{implementation-dependent};
but it must be
a @supertypeof{fixnum}.

The @loopref{maximize} and
@loopref{minimize}
constructs compare
the value of the supplied @param{form} obtained during the first
iteration with values obtained in successive iterations.
The maximum (for @loopref{maximize}) or minimum (for @loopref{minimize})
value encountered is determined
(as if by @thefunction{max} for @loopref{maximize} and
as if by @thefunction{min} for @loopref{minimize})
and returned.
If the @loopref{maximize} or @loopref{minimize} clause
is never executed, the accumulated value is unspecified.
The argument @param{var} accumulates the maximum or minimum value;
if @param{var} is supplied,
@symbolref{loop, SYM} does not return the maximum or minimum automatically.
The @param{var} argument is bound as if by the construct @loopref{with}.
If @loopref{into} @param{var} is used,
a @term{type} can be supplied for @param{var} with the @param{type-spec} argument;
the consequences are unspecified if a nonnumeric @term{type} is supplied.
If there is no @loopref{into} variable,
the optional @param{type-spec} argument applies to the internal variable
that is keeping the maximum or minimum value.
The default @term{type}
is @term{implementation-dependent}; but it
must be a @supertypeof{real}.

The @loopref{sum} construct forms a cumulative sum
of the successive @term{primary values} of the supplied @param{form}
at each iteration.
The argument @param{var} is used to accumulate the sum;
if @param{var} is supplied,
@symbolref{loop, SYM} does not return the final sum automatically.
The @param{var} argument is bound as if by the construct @loopref{with}
to a zero of the appropriate type.
Subsequent values (including any necessary coercions) are computed as if by @thefunction{+}.
If @loopref{into} @param{var} is used,
a @term{type} can be supplied for @param{var} with the @param{type-spec} argument;
the consequences are unspecified if a nonnumeric @term{type} is supplied.
If there is no @loopref{into} variable,
the optional @param{type-spec} argument applies to the internal variable
that is keeping the sum.
The default @term{type}
is @term{implementation-dependent}; but it
must be a @supertypeof{number}.

If @loopref{into} is used,
the construct does not provide a default return value;
however, the variable is available
for use in any @loopref{finally} clause.


Certain kinds of accumulation clauses can be combined in a @symbolref{loop, SYM}
if their destination is the same
(the result of @symbolref{loop, SYM} or an @loopref{into} @param{var})
because they are considered to accumulate conceptually compatible quantities.
In particular,
any elements of following sets of accumulation clauses can be mixed
with other elements of the same set for the same destination
in a @symbolref{loop, SYM} @term{form}:


@itemize @bullet{}
@item @loopref{collect}, @loopref{append}, @loopref{nconc}

@item @loopref{sum}, @loopref{count}

@item @loopref{maximize}, @loopref{minimize}
@end itemize


@lisp
;; Collect every name and the kids in one list by using
;; COLLECT and APPEND.
 (loop for name in '(fred sue alice joe june)
       for kids in '((bob ken) () () (kris sunshine) ())
       collect name
       append kids)
@EV{} (FRED BOB KEN SUE ALICE JOE KRIS SUNSHINE JUNE)
@end lisp


Any two
clauses that do not accumulate the same @term{type} of
@term{object}
can coexist in a @symbolref{loop, SYM} only
if each clause accumulates its values into
a different
@term{variable}.


@node Examples of COLLECT clause
@subsubsection Examples of COLLECT clause

@lisp
;; Collect all the symbols in a list.
 (loop for i in '(bird 3 4 turtle (1 . 4) horse cat)
       when (symbolp i) collect i)
@EV{} (BIRD TURTLE HORSE CAT)

;; Collect and return odd numbers.
 (loop for i from 1 to 10
       if (oddp i) collect i)
@EV{} (1 3 5 7 9)

;; Collect items into local variable, but don't return them.
 (loop for i in '(a b c d) by #'cddr
       collect i into my-list
       finally (print my-list))
@OUT{} (A C)
@EV{} NIL
@end lisp



@node Examples of APPEND and NCONC clauses
@subsubsection Examples of APPEND and NCONC clauses

@lisp
;; Use APPEND to concatenate some sublists.
  (loop for x in '((a) (b) ((c)))
        append x)
@EV{} (A B (C))

;; NCONC some sublists together.  Note that only lists made by the
;; call to LIST are modified.
  (loop for i upfrom 0
        as x in '(a b (c))
        nconc (if (evenp i) (list x) nil))
@EV{} (A (C))
@end lisp



@node Examples of COUNT clause
@subsubsection Examples of COUNT clause

@lisp
 (loop for i in '(a b nil c nil d e)
       count i)
@EV{} 5
@end lisp



@node Examples of MAXIMIZE and MINIMIZE clauses
@subsubsection Examples of MAXIMIZE and MINIMIZE clauses

@lisp
 (loop for i in '(2 1 5 3 4)
       maximize i)
@EV{} 5
 (loop for i in '(2 1 5 3 4)
       minimize i)
@EV{} 1

;; In this example, FIXNUM applies to the internal variable that holds
;; the maximum value.
 (setq series '(1.2 4.3 5.7))
@EV{} (1.2 4.3 5.7)
 (loop for v in series
       maximize (round v) of-type fixnum)
@EV{} 6

;; In this example, FIXNUM applies to the variable RESULT.
 (loop for v of-type float in series
       minimize (round v) into result of-type fixnum
       finally (return result))
@EV{} 1
@end lisp



@node Examples of SUM clause
@subsubsection Examples of SUM clause

@lisp
 (loop for i of-type fixnum in '(1 2 3 4 5)
       sum i)
@EV{} 15
 (setq series '(1.2 4.3 5.7))
@EV{} (1.2 4.3 5.7)
 (loop for v in series
       sum (* 2.0 v))
@EV{} 22.4
@end lisp




@node Termination Test Clauses
@subsection Termination Test Clauses

The @loopref{repeat} construct causes iteration to terminate after a
specified number of times.
The loop body executes @i{n} times, where @i{n} is the value
of the expression @param{form}.  The @param{form} argument is evaluated one time
in the loop prologue.  If the expression evaluates to 0 or
to a negative @term{number}, the loop body is not evaluated.

The constructs @loopref{always},
@loopref{never},
@loopref{thereis},
@loopref{while},
@loopref{until},
and the macro @symbolref{loop-finish, SYM}
allow conditional termination of iteration within
a @symbolref{loop, SYM}.

The constructs @loopref{always}, @loopref{never}, and @loopref{thereis} provide
specific values to be returned when a @symbolref{loop, SYM} terminates.
Using @loopref{always}, @loopref{never}, or @loopref{thereis} in a loop with
value accumulation clauses that are not @loopref{into} causes
an error @oftype{program-error} to be signaled (at macro expansion time).
Since @loopref{always}, @loopref{never}, and @loopref{thereis}
use
@thespecop{return-from}
to terminate iteration,
any @loopref{finally} clause that is supplied is not evaluated
when exit occurs due to any of these constructs.
In all other respects these
constructs behave like the @loopref{while} and @loopref{until} constructs.

The @loopref{always} construct takes one @term{form} and terminates the
@symbolref{loop, SYM}
if the @term{form} ever evaluates to @nil{}; in this case, it returns
@nil{}.  Otherwise, it provides a default return value of @symbolref{t, SC}.
If the value of the supplied @term{form} is never @nil{}, some other construct
can terminate the iteration.

The @loopref{never} construct terminates iteration the first time that
the value of the supplied @param{form} is @term{non-nil}; the @symbolref{loop, SYM} returns
@nil{}.
If the value of the supplied @param{form} is always  @nil{}, some other
construct can terminate the iteration.
Unless some other clause contributes
a return value, the default value returned is @symbolref{t, SC}.

The @loopref{thereis} construct terminates iteration the first time that the
value of the supplied @param{form} is @term{non-nil}; the @symbolref{loop, SYM} returns the
value of the supplied @param{form}.
If the value of the supplied @param{form}
is always  @nil{}, some other
construct can terminate the iteration.  Unless some other clause contributes a
return value, the default value returned is @nil{}.


There are two differences between the @loopref{thereis} and @loopref{until}
constructs:


@itemize @bullet{}
@item The @loopref{until} construct does not return a value or
@nil{}@spc{}based on the value of the supplied @param{form}.

@item The @loopref{until} construct executes
any @loopref{finally} clause.
Since @loopref{thereis} uses
@thespecop{return-from}
to terminate iteration,
any @loopref{finally} clause that is supplied is not evaluated
when exit occurs due to @loopref{thereis}.
@end itemize




The @loopref{while} construct allows iteration to continue until the
supplied @param{form}
evaluates to @term{false}.  The supplied @param{form}
is reevaluated at the location of the @loopref{while} clause.

The @loopref{until} construct is equivalent to
@f{while (not @param{form})@dots{}}.  If the value of the
supplied @param{form} is @term{non-nil}, iteration terminates.

Termination-test control constructs can be used anywhere within the loop body.
The termination tests are used in the order in which they appear.
If an @loopref{until} or @loopref{while} clause causes
termination, any clauses that precede it in the source
are still evaluated.
If the @loopref{until} and @tt{while} constructs cause termination,
control is passed to the loop epilogue, where any @loopref{finally}
clauses will be executed.

There are two differences between the @loopref{never} and @loopref{until}
constructs:


@itemize @bullet{}
@item The @loopref{until} construct does not return
@symbolref{t, SC}@spc{}or @nil{}@spc{}based on the value of the supplied @param{form}.

@item
The @loopref{until} construct
does not bypass any @loopref{finally} clauses.
Since @loopref{never} uses
@thespecop{return-from}
to terminate iteration,
any @loopref{finally} clause that is supplied is not evaluated
when exit occurs due to @loopref{never}.
@end itemize


In most cases it is not necessary to use @symbolref{loop-finish, SYM}
because other loop control clauses terminate the @symbolref{loop, SYM}.
The macro @symbolref{loop-finish, SYM} is used to provide a normal exit
from a nested conditional inside a @symbolref{loop, SYM}.
Since @symbolref{loop-finish, SYM} transfers control to the loop epilogue,
using @symbolref{loop-finish, SYM} within a @loopref{finally} expression can cause
infinite looping.

@node Examples of REPEAT clause
@subsubsection Examples of REPEAT clause

@lisp
 (loop repeat 3
       do (format t "~&What I say three times is true.~%"))
@OUT{} What I say three times is true.
@OUT{} What I say three times is true.
@OUT{} What I say three times is true.
@EV{} NIL
 (loop repeat -15
   do (format t "What you see is what you expect~%"))
@EV{} NIL
@end lisp



@node Examples of ALWAYS
@subsubsection Examples of ALWAYS, NEVER, and THEREIS clauses

@lisp
;; Make sure I is always less than 11 (two ways).
;; The FOR construct terminates these loops.
 (loop for i from 0 to 10
       always (< i 11))
@EV{} T
 (loop for i from 0 to 10
       never (> i 11))
@EV{} T

;; If I exceeds 10 return I; otherwise, return NIL.
;; The THEREIS construct terminates this loop.
 (loop for i from 0
       thereis (when (> i 10) i) )
@EV{} 11

;;; The FINALLY clause is not evaluated in these examples.
 (loop for i from 0 to 10
       always (< i 9)
       finally (print "you won't see this"))
@EV{} NIL
 (loop never t
       finally (print "you won't see this"))
@EV{} NIL
 (loop thereis "Here is my value"
       finally (print "you won't see this"))
@EV{} "Here is my value"

;; The FOR construct terminates this loop, so the FINALLY clause
;; is evaluated.
 (loop for i from 1 to 10
       thereis (> i 11)
       finally (prin1 'got-here))
@OUT{} GOT-HERE
@EV{} NIL

;; If this code could be used to find a counterexample to Fermat's
;; last theorem, it would still not return the value of the
;; counterexample because all of the THEREIS clauses in this example
;; only return T.  But if Fermat is right, that won't matter
;; because this won't terminate.

 (loop for z upfrom 2
       thereis
         (loop for n upfrom 3 below (log z 2)
               thereis
                 (loop for x below z
                       thereis
                         (loop for y below z
                               thereis (= (+ (expt x n) (expt y n))
                                          (expt z n))))))
@end lisp



@node Examples of WHILE and UNTIL clauses
@subsubsection Examples of WHILE and UNTIL clauses

@lisp
 (loop while (hungry-p) do (eat))

;; UNTIL NOT is equivalent to WHILE.
 (loop until (not (hungry-p)) do (eat))

;; Collect the length and the items of STACK.
 (let ((stack '(a b c d e f)))
   (loop for item = (length stack) then (pop stack)
         collect item
         while stack))
@EV{} (6 A B C D E F)

;; Use WHILE to terminate a loop that otherwise wouldn't terminate.
;; Note that WHILE occurs after the WHEN.
 (loop for i fixnum from 3
       when (oddp i) collect i
       while (< i 5))
@EV{} (3 5)
@end lisp




@node Unconditional Execution Clauses
@subsection Unconditional Execution Clauses

The @loopref{do} and @loopref{doing} constructs
evaluate the
supplied @param{forms}
wherever they occur in the expanded form of @symbolref{loop, SYM}.
The @param{form} argument can be any @term{compound form}.
Each @param{form} is evaluated in every iteration.
Because every loop clause must begin with a @term{loop keyword},
the keyword @loopref{do} is used when no control action other than execution is
required.

The @loopref{return} construct takes one @term{form}.
Any @term{values} returned by the @term{form}
are immediately returned by the @symbolref{loop, SYM} form.
It is equivalent to the clause
@f{do (return-from @i{block-name} @i{value})},
where @i{block-name} is the name specified in a @loopref{named}
clause, or @nil{}@spc{}if there is no @loopref{named} clause.

@node Examples of unconditional execution
@subsubsection Examples of unconditional execution

@lisp
;; Print numbers and their squares.
;; The DO construct applies to multiple forms.
 (loop for i from 1 to 3
       do (print i)
          (print (* i i)))
@OUT{} 1
@OUT{} 1
@OUT{} 2
@OUT{} 4
@OUT{} 3
@OUT{} 9
@EV{} NIL

@end lisp




@node Conditional Execution Clauses
@subsection Conditional Execution Clauses


The @loopref{if}, @loopref{when}, and @loopref{unless} constructs
establish conditional control in a @symbolref{loop, SYM}. If the test
passes, the succeeding loop clause is executed. If the test does
not pass, the succeeding clause is skipped, and program control
moves to the clause that follows the @term{loop keyword}
@loopref{else}. If the test does not pass and no @loopref{else}
clause is supplied, control is transferred to the clause or
construct following the entire conditional clause.

If conditional clauses are nested, each @loopref{else} is paired
with the closest preceding conditional clause that has no
associated @loopref{else} or @loopref{end}.

In the @loopref{if} and @loopref{when} clauses, which are
synonymous, the test passes if the value of @param{form} is
@term{true}.

In the @loopref{unless} clause,
the test passes if the value of @param{form} is @term{false}.


Clauses that follow the test expression can be grouped by using
the @term{loop keyword} @loopref{and} to produce a conditional block consisting of
a compound clause.

The @term{loop keyword} @loopref{it} can be used to refer to the result
of the test expression in a clause.
Use the @term{loop keyword} @loopref{it} in place of the form in a
@loopref{return} clause or an @i{accumulation} clause that is
inside a conditional execution clause.
If multiple clauses are connected with @loopref{and}, the @loopref{it}
construct must be in the first clause in the block.

The optional @term{loop keyword} @loopref{end} marks the end of the clause.  If this
keyword is not supplied, the next @term{loop keyword} marks the end.  The construct
@loopref{end} can be used to distinguish the scoping of compound clauses.

@node Examples of WHEN clause
@subsubsection Examples of WHEN clause

@lisp
;; Signal an exceptional condition.
 (loop for item in '(1 2 3 a 4 5)
       when (not (numberp item))
        return (cerror "enter new value" "non-numeric value: ~s" item))
Error: non-numeric value: A

;; The previous example is equivalent to the following one.
 (loop for item in '(1 2 3 a 4 5)
       when (not (numberp item))
        do (return
            (cerror "Enter new value" "non-numeric value: ~s" item)))
Error: non-numeric value: A
@end lisp


@lisp
;; This example parses a simple printed string representation from
;; BUFFER (which is itself a string) and returns the index of the
;; closing double-quote character.
 (let ((buffer "@bsl{}"a@bsl{}" @bsl{}"b@bsl{}""))
   (loop initially (unless (char= (char buffer 0) #@bsl{}")
                     (loop-finish))
         for i of-type fixnum from 1 below (length (the string buffer))
         when (char= (char buffer i) #@bsl{}")
          return i))
@EV{} 2

;; The collected value is returned.
 (loop for i from 1 to 10
       when (> i 5)
         collect i
       finally (prin1 'got-here))
@OUT{} GOT-HERE
@EV{} (6 7 8 9 10)

;; Return both the count of collected numbers and the numbers.
 (loop for i from 1 to 10
       when (> i 5)
         collect i into number-list
         and count i into number-count
       finally (return (values number-count number-list)))
@EV{} 5, (6 7 8 9 10)
@end lisp




@node Miscellaneous Clauses
@subsection Miscellaneous Clauses

@node Control Transfer Clauses
@subsubsection Control Transfer Clauses

The @loopref{named} construct
establishes a name for an @term{implicit block} surrounding the
entire
@symbolref{loop, SYM} so that @thespecop{return-from} can be used to return
values from or to exit @symbolref{loop, SYM}.
Only one name per @symbolref{loop, SYM} @term{form} can be assigned.
If used, the @loopref{named} construct must be the first clause in the loop expression.

The @loopref{return} construct takes one @term{form}.
Any @term{values} returned by the @term{form}
are immediately returned by the @symbolref{loop, SYM} form.
This construct is similar to @thespecop{return-from} and @themacro{return}.
The @loopref{return} construct
does not execute any @loopref{finally} clause that
the @symbolref{loop, SYM} @term{form}
is given.

@node Examples of NAMED clause
@subsubsection Examples of NAMED clause


@lisp
;; Just name and return.
 (loop named max
       for i from 1 to 10
       do (print i)
       do (return-from max 'done))
@OUT{} 1
@EV{} DONE
@end lisp




@node Initial and Final Execution
@subsubsection Initial and Final Execution

The @loopref{initially} and @loopref{finally} constructs
evaluate forms that occur before and after the loop body.

The @loopref{initially} construct causes the supplied
@param{compound-forms}
to be evaluated
in the loop prologue, which precedes all loop code except for
initial settings supplied by constructs @loopref{with}, @loopref{for}, or
@loopref{as}.
The code for any @loopref{initially} clauses is
executed
in the order in which the clauses appeared in
the @symbolref{loop, SYM}.

The @loopref{finally} construct causes the supplied
@param{compound-forms}
to be evaluated
in the loop epilogue after normal iteration terminates.
The code for any @loopref{finally} clauses is
executed
in the order in which the clauses appeared in
the @symbolref{loop, SYM}.  The collected code is executed once in the loop epilogue
before any implicit values are returned from the accumulation clauses.
An explicit transfer of control (@eg{} by @symbolref{return, SYM}, @symbolref{go, SYM}, or @symbolref{throw, SYM})
from the loop body, however, will exit the
@symbolref{loop, SYM} without executing the epilogue code.

Clauses such as @loopref{return}, @loopref{always}, @loopref{never}, and
@loopref{thereis}
can bypass the @loopref{finally} clause.
@symbolref{return, SYM} (or @symbolref{return-from, SYM}, if the @loopref{named} option was supplied)
can be used after @loopref{finally} to return values from a @symbolref{loop, SYM}.
Such an @term{explicit return}
inside the
@loopref{finally} clause takes precedence over returning the accumulation
from clauses supplied by such keywords as @loopref{collect}, @loopref{nconc},
@loopref{append}, @loopref{sum}, @loopref{count}, @loopref{maximize}, and
@loopref{minimize};
the accumulation values for these preempted clauses are not returned by
@symbolref{loop, SYM} if @symbolref{return, SYM} or @symbolref{return-from, SYM} is used.




@node Examples of Miscellaneous Loop Features
@subsection Examples of Miscellaneous Loop Features

@lisp
 (let ((i 0))                     ; no loop keywords are used
    (loop (incf i) (if (= i 3) (return i)))) @EV{} 3
 (let ((i 0)(j 0))
    (tagbody
      (loop (incf j 3) (incf i) (if (= i 3) (go exit)))
      exit)
    j) @EV{} 9
@end lisp


In the following example, the variable @f{x} is stepped
before @f{y} is stepped; thus, the value of @f{y}
reflects the updated value of @f{x}:

@lisp
 (loop for x from 1 to 10
       for y = nil then x
       collect (list x y))
@EV{} ((1 NIL) (2 2) (3 3) (4 4) (5 5) (6 6) (7 7) (8 8) (9 9) (10 10))
@end lisp


In this example, @f{x} and @f{y} are stepped in @term{parallel}:

@lisp
 (loop for x from 1 to 10
       and y = nil then x
       collect (list x y))
@EV{} ((1 NIL) (2 1) (3 2) (4 3) (5 4) (6 5) (7 6) (8 7) (9 8) (10 9))
@end lisp


@node Examples of clause grouping
@subsubsection Examples of clause grouping
@lisp
;; Group conditional clauses.
 (loop for i in '(1 324 2345 323 2 4 235 252)
       when (oddp i)
         do (print i)
         and collect i into odd-numbers
         and do (terpri)
       else                              ; I is even.
         collect i into even-numbers
       finally
         (return (values odd-numbers even-numbers)))
@OUT{} 1
@OUT{}
@OUT{} 2345
@OUT{}
@OUT{} 323
@OUT{}
@OUT{} 235
@EV{} (1 2345 323 235), (324 2 4 252)

;; Collect numbers larger than 3.
 (loop for i in '(1 2 3 4 5 6)
       when (and (> i 3) i)
       collect it)                      ; IT refers to (and (> i 3) i).
@EV{} (4 5 6)

;; Find a number in a list.
 (loop for i in '(1 2 3 4 5 6)
       when (and (> i 3) i)
       return it)
@EV{} 4

;; The above example is similar to the following one.
 (loop for i in '(1 2 3 4 5 6)
       thereis (and (> i 3) i))
@EV{} 4

@medbreak{}
;; Nest conditional clauses.
 (let ((list '(0 3.0 apple 4 5 9.8 orange banana)))
   (loop for i in list
         when (numberp i)
           when (floatp i)
             collect i into float-numbers
           else                                  ; Not (floatp i)
             collect i into other-numbers
         else                                    ; Not (numberp i)
           when (symbolp i)
             collect i into symbol-list
           else                                  ; Not (symbolp i)
             do (error "found a funny value in list ~S, value ~S~%" list i)
         finally (return (values float-numbers other-numbers symbol-list))))
@EV{} (3.0 9.8), (0 4 5), (APPLE ORANGE BANANA)

;; Without the END preposition, the last AND would apply to the
;; inner IF rather than the outer one.
 (loop for x from 0 to 3
       do (print x)
       if (zerop (mod x 2))
         do (princ " a")
          and if (zerop (floor x 2))
                do (princ " b")
                end
          and do (princ " c"))
@OUT{} 0  a b c
@OUT{} 1
@OUT{} 2  a c
@OUT{} 3
@EV{} NIL
@end lisp




@node Notes about Loop
@subsection Notes about Loop

@term{Types} can be supplied for loop variables.
It is not necessary to supply a @term{type} for any variable,
but supplying the @term{type}
can ensure that the variable has a correctly typed initial value,
and it can also enable compiler optimizations
(depending on the @term{implementation}).

The clause @loopref{repeat} @i{n} ... is roughly equivalent to a clause such as

@lisp
 (loop for @i{internal-variable} downfrom (- @i{n} 1) to 0 ...)
@end lisp


but in some @term{implementations},
the @loopref{repeat} construct might be more efficient.

Within the executable parts of the loop clauses and around the entire
@symbolref{loop, SYM} form, variables can be bound by using @symbolref{let, SYM}.

Use caution when using a variable named @tt{IT} (in any @term{package})
in connection with @symbolref{loop, SYM}, since @loopref{it} is a @term{loop keyword}
that can be used in place of a @term{form} in certain contexts.

There is
no
@term{standardized}
mechanism for users to add
extensions to @symbolref{loop, SYM}.

@node Iteration Dictionary
@section Iteration Dictionary

@menu
* do; do*::
* dotimes::
* dolist::
* loop::
* loop-finish::
@end menu

@node do; do*
@subsection do, do* (Macro)
@syindexanchor{do, SYM}
@cindex do
@syindexanchor{do*, SYM}
@cindex do*
@anchor{do}



@subsubheading Syntax:

@DefmacWithValuesNewline{do, @vtop{@hbox{@paren{@star{@VarInitStep{}}}} @hbox{@paren{end-test-form @starparam{result-form}}} @hbox{@starparam{declaration} @star{@curly{tag @mat{@vert{}} statement}}}}, @starparam{result}}

@DefmacWithValuesNewline{do*, @vtop{@hbox{@paren{@star{@VarInitStep{}}}} @hbox{@paren{end-test-form @starparam{result-form}}} @hbox{@starparam{declaration} @star{@curly{tag @mat{@vert{}} statement}}}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol}.

@param{init-form}---a @term{form}.

@param{step-form}---a @term{form}.

@param{end-test-form}---a @term{form}.

@param{result-forms}---an @term{implicit progn}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@param{results}---if a @symbolref{return, SYM} or @symbolref{return-from, SYM} form is executed,
the @term{values} passed from that @term{form};
otherwise, the @term{values} returned by the @param{result-forms}.

@subsubheading Description:

@symbolref{do, SYM} iterates over a group of @param{statements}
while a test condition holds.
@symbolref{do, SYM} accepts an arbitrary number of iteration @param{vars}
which are bound within the iteration and stepped in parallel.
An initial value may be supplied for each iteration variable by use of
an @param{init-form}.
@param{Step-forms} may be used to specify how the
@param{vars} should be updated on succeeding iterations through the loop.
@param{Step-forms} may be used both to generate successive
values or to accumulate results.
If the @param{end-test-form} condition
is met prior to an execution of the body, the iteration terminates.
@param{Tags} label @param{statements}.

@symbolref{do*, SYM} is exactly like @symbolref{do, SYM}
except that the @term{bindings} and steppings
of the @param{vars} are performed sequentially rather than in parallel.

Before the first iteration, all the @param{init-forms} are evaluated, and
each @param{var} is bound to the value of its respective @param{init-form},
if supplied.
This is a @term{binding}, not an assignment; when the loop terminates,
the old values of those variables will be restored.
For @symbolref{do, SYM}, all
of the @param{init-forms} are evaluated before any @param{var}
is bound. The
@param{init-forms} can refer to the @term{bindings} of the @param{vars}
visible before beginning execution of
@symbolref{do, SYM}.
For @symbolref{do*, SYM}, the first @param{init-form} is evaluated, then the first
@param{var} is bound to that value, then the second @param{init-form}
is evaluated, then the second @param{var} is bound, and so on;
in general, the @i{k}th @param{init-form} can refer to the new binding
of the @i{j}th @param{var} if @i{j} < @i{k}, and otherwise to the
old binding of the @i{j}th @param{var}.

At the beginning of each iteration, after processing the variables,
the @param{end-test-form} is evaluated.  If the result is
@term{false}, execution proceeds with the body of the @symbolref{do, SYM}
(or @symbolref{do*, SYM}) form.
If the result is @term{true}, the @param{result-forms} are evaluated in order
as an @term{implicit progn},
and then @symbolref{do, SYM} or @symbolref{do*, SYM} returns.

At the beginning of each iteration other than the first,
@param{vars} are updated as follows.  All the @param{step-forms}, if supplied,
are evaluated, from left to right, and the resulting values are
assigned to the respective @param{vars}.
Any @param{var} that has no associated @param{step-form} is not assigned to.
For @symbolref{do, SYM}, all the @param{step-forms} are evaluated before any @param{var}
is updated; the assignment of values to @param{vars} is done in parallel,
as if by @symbolref{psetq, SYM}.
Because all of the @param{step-forms} are evaluated before any
of the @param{vars} are altered, a @param{step-form} when evaluated always has
access to the old values of all the @param{vars}, even if other @param{step-forms}
precede it.
For @symbolref{do*, SYM}, the first @param{step-form} is evaluated, then the
value is assigned to the first @param{var}, then the second @param{step-form}
is evaluated, then the value is assigned to the second @param{var}, and so on;
the assignment of values to variables is done sequentially,
as if by @symbolref{setq, SYM}.
For either @symbolref{do, SYM} or @symbolref{do*, SYM},
after the @param{vars} have been updated,
the @param{end-test-form}
is evaluated as described above, and the iteration continues.

The remainder of the @symbolref{do, SYM} (or @symbolref{do*, SYM}) form constitutes
an @term{implicit tagbody}.
@param{Tags} may appear within the body of a @symbolref{do, SYM} loop
for use by @symbolref{go, SYM} statements appearing in the body (but such @symbolref{go, SYM}
statements may not appear in the variable specifiers, the @param{end-test-form},
or the @param{result-forms}).
When the end of a @symbolref{do, SYM} body is reached, the next iteration cycle
(beginning with the evaluation of @param{step-forms}) occurs.

An @term{implicit block} named @nil{}@spc{}surrounds the entire @symbolref{do, SYM}
(or @symbolref{do*, SYM}) form.
A @symbolref{return, SYM} statement may be used at any point to exit the loop
immediately.

@param{Init-form}  is an
initial value for the @param{var} with which it is associated.
If @param{init-form} is omitted, the initial value of @param{var} is @nil{}.
If a @param{declaration} is supplied for a @param{var}, @param{init-form}
must be consistent with the @param{declaration}.

@param{Declarations} can appear at the beginning of a @symbolref{do, SYM}
(or @symbolref{do*, SYM}) body.
They apply to code in the @symbolref{do, SYM} (or @symbolref{do*, SYM}) body,
to the @term{bindings} of the @symbolref{do, SYM} (or @symbolref{do*, SYM})
@param{vars},
to the @param{step-forms},
to the @param{end-test-form}, and to the @param{result-forms}.

@subsubheading Examples:
@lisp
 (do ((temp-one 1 (1+ temp-one))
       (temp-two 0 (1- temp-two)))
      ((> (- temp-one temp-two) 5) temp-one)) @EV{} 4

 (do ((temp-one 1 (1+ temp-one))
       (temp-two 0 (1+ temp-one)))
      ((= 3 temp-two) temp-one)) @EV{} 3

 (do* ((temp-one 1 (1+ temp-one))
        (temp-two 0 (1+ temp-one)))
       ((= 3 temp-two) temp-one)) @EV{} 2

 (do ((j 0 (+ j 1)))
     (nil)                       ;Do forever.
   (format t "~%Input ~D:" j)
   (let ((item (read)))
     (if (null item) (return)   ;Process items until NIL seen.
         (format t "~&Output ~D: ~S" j item))))
@OUT{} Input 0: @IN{banana}
@OUT{} Output 0: BANANA
@OUT{} Input 1: @IN{(57 boxes)}
@OUT{} Output 1: (57 BOXES)
@OUT{} Input 2: @IN{NIL}
@EV{} NIL

 (setq a-vector (vector 1 nil 3 nil))
 (do ((i 0 (+ i 1))     ;Sets every null element of a-vector to zero.
      (n (array-dimension a-vector 0)))
     ((= i n))
   (when (null (aref a-vector i))
     (setf (aref a-vector i) 0))) @EV{} NIL
a-vector @EV{} #(1 0 3 0)
@end lisp


@lisp
 (do ((x e (cdr x))
      (oldx x x))
     ((null x))
   body)
@end lisp

is an example of parallel assignment to index variables.  On the first
iteration, the value of @f{oldx} is whatever value @f{x} had before
the @symbolref{do, SYM} was entered.  On succeeding iterations, @f{oldx} contains
the value that @f{x} had on the previous iteration.

@lisp
 (do ((x foo (cdr x))
      (y bar (cdr y))
      (z '() (cons (f (car x) (car y)) z)))
     ((or (null x) (null y))
      (nreverse z)))
@end lisp

does the same thing as @f{(mapcar #'f foo bar)}.  The step
computation for @f{z} is an example of the fact that variables
are stepped in parallel.
Also, the body of the loop is empty.

@lisp
 (defun list-reverse (list)
        (do ((x list (cdr x))
             (y '() (cons (car x) y)))
            ((endp x) y)))
@end lisp


As an example of nested iterations, consider a data structure that is a
@term{list} of @term{conses}. The @term{car} of each @term{cons} is a
@term{list} of @term{symbols},
and the @term{cdr} of each @term{cons} is a
@term{list} of equal length containing
corresponding values.  Such a data structure is similar to an association
list,
but is divided into ``frames''; the overall structure resembles a rib-cage.
A lookup function on such a data structure might be:

@lisp
 (defun ribcage-lookup (sym ribcage)
        (do ((r ribcage (cdr r)))
            ((null r) nil)
          (do ((s (caar r) (cdr s))
               (v (cdar r) (cdr v)))
              ((null s))
            (when (eq (car s) sym)
              (return-from ribcage-lookup (car v)))))) @EV{} RIBCAGE-LOOKUP
@end lisp


@subsubheading See Also:

other iteration functions
(@ref{dolist}, @ref{dotimes}, and @ref{loop})
and more primitive functionality
(@ref{tagbody}, @ref{go}, @ref{block}, @ref{return},
@ref{let}, and @ref{setq})

@subsubheading Notes:
If @param{end-test-form} is @nil{}, the test will never succeed.
This provides an idiom for ``do forever'':
the body of the @symbolref{do, SYM} or @symbolref{do*, SYM}
is executed repeatedly.
The infinite loop can be terminated by the use of @symbolref{return, SYM},
@symbolref{return-from, SYM}, @symbolref{go, SYM} to an outer level, or @symbolref{throw, SYM}.

A @symbolref{do, SYM} @term{form} may be explained in terms of the more primitive @term{forms}
@symbolref{block, SYM}, @symbolref{return, SYM},
@symbolref{let, SYM}, @symbolref{loop, SYM}, @symbolref{tagbody, SYM},
and @symbolref{psetq, SYM} as follows:

@lisp
 (block nil
   (let ((var1 init1)
         (var2 init2)
         ...
         (varn initn))
     @i{declarations}
     (loop (when end-test (return (progn . result)))
           (tagbody . tagbody)
           (psetq var1 step1
                  var2 step2
                  ...
                  varn stepn))))
@end lisp


@symbolref{do*, SYM} is similar, except that @symbolref{let*, SYM} and @symbolref{setq, SYM} replace
the @symbolref{let, SYM} and @symbolref{psetq, SYM}, respectively.



@node dotimes
@subsection dotimes (Macro)
@syindexanchor{dotimes, SYM}
@cindex dotimes



@subsubheading Syntax:

@DefmacWithValuesNewline{dotimes, @paren{var count-form @brac{result-form}} @starparam{declaration} @star{@curly{tag | statement}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol}.

@param{count-form}---a @term{form}.

@param{result-form}---a @term{form}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@param{results}---if a @symbolref{return, SYM} or @symbolref{return-from, SYM} form is executed,
the @term{values} passed from that @term{form};
otherwise, the @term{values} returned by the @param{result-form}
or @nil{}@spc{}if there is no @param{result-form}.

@subsubheading Description:

@symbolref{dotimes, SYM} iterates over a series of @term{integers}.

@symbolref{dotimes, SYM} evaluates @param{count-form},
which should produce an @term{integer}.
If @param{count-form} is zero or negative,
the body is not executed.
@symbolref{dotimes, SYM} then executes the body once for each @term{integer} from 0 up to
but not including
the value of @param{count-form},
in the order in which the
@param{tags} and @param{statements} occur, with
@param{var} bound to each @term{integer}.
Then @param{result-form}
is evaluated.
At the time @param{result-form} is processed, @param{var} is bound to
the number of times the body was executed.
@param{Tags} label
@param{statements}.

An @term{implicit block}
named @nil{}@spc{}surrounds @symbolref{dotimes, SYM}.
@symbolref{return, SYM} may be used to terminate the loop immediately without
performing any further iterations, returning zero or more @term{values}.

The body of the loop is an @term{implicit tagbody};
it may contain tags to serve as the targets of @symbolref{go, SYM} statements.
Declarations may appear before the body of the loop.

The @term{scope} of the binding of @param{var}
does not include the @param{count-form},
but the @param{result-form} is included.

It is @term{implementation-dependent} whether @symbolref{dotimes, SYM}
@term{establishes} a new @term{binding} of @param{var} on each iteration
or whether it @term{establishes} a binding for @param{var} once at the
beginning and then @param{assigns} it on any subsequent iterations.

@subsubheading Examples:

@lisp
 (dotimes (temp-one 10 temp-one)) @EV{} 10
 (setq temp-two 0) @EV{} 0
 (dotimes (temp-one 10 t) (incf temp-two)) @EV{} T
 temp-two @EV{} 10
@end lisp


Here is an example of the use of @f{dotimes} in processing strings:

@lisp
;;; True if the specified subsequence of the string is a
;;; palindrome (reads the same forwards and backwards).
 (defun palindromep (string @optional{}
                           (start 0)
                           (end (length string)))
   (dotimes (k (floor (- end start) 2) t)
    (unless (char-equal (char string (+ start k))
                        (char string (- end k 1)))
      (return nil))))
 (palindromep "Able was I ere I saw Elba") @EV{} T
 (palindromep "A man, a plan, a canal--Panama!") @EV{} NIL
 (remove-if-not #'alpha-char-p          ;Remove punctuation.
               "A man, a plan, a canal--Panama!")
@EV{} "AmanaplanacanalPanama"
 (palindromep
  (remove-if-not #'alpha-char-p
                "A man, a plan, a canal--Panama!")) @EV{} T
 (palindromep
  (remove-if-not
   #'alpha-char-p
   "Unremarkable was I ere I saw Elba Kramer, nu?")) @EV{} T
 (palindromep
  (remove-if-not
   #'alpha-char-p
   "A man, a plan, a cat, a ham, a yak,
                  a yam, a hat, a canal--Panama!")) @EV{} T
@end lisp


@subsubheading See Also:

@ref{do}, @ref{dolist}, @ref{tagbody}

@subsubheading Notes:

@symbolref{go, SYM} may be used within the body of
@symbolref{dotimes, SYM} to transfer control to a statement labeled by a @param{tag}.



@node dolist
@subsection dolist (Macro)
@syindexanchor{dolist, SYM}
@cindex dolist



@subsubheading Syntax:

@DefmacWithValuesNewline{dolist, @paren{var list-form @brac{result-form}} @starparam{declaration} @star{@curly{tag | statement}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol}.

@param{list-form}---a @term{form}.

@param{result-form}---a @term{form}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@param{results}---if a @symbolref{return, SYM} or @symbolref{return-from, SYM} form is executed,
the @term{values} passed from that @term{form};
otherwise, the @term{values} returned by the @param{result-form}
or @nil{}@spc{}if there is no @param{result-form}.

@subsubheading Description:

@symbolref{dolist, SYM} iterates over the elements of a @term{list}.
The body of @symbolref{dolist, SYM} is like a @symbolref{tagbody, SYM}.
It consists of a series of @param{tags} and @param{statements}.

@symbolref{dolist, SYM}
evaluates @param{list-form},
which should produce a @term{list}. It then executes the body
once for each element in the @term{list}, in the order in which the
@param{tags} and @param{statements} occur, with
@param{var} bound to the element.
Then @param{result-form}
is evaluated.
@param{tags} label
@param{statements}.

At the time @param{result-form} is processed,
@param{var} is bound to @nil{}.

An @term{implicit block}
named @nil{}@spc{}surrounds @symbolref{dolist, SYM}.
@symbolref{return, SYM} may be used to terminate the loop immediately without
performing any further iterations, returning zero or more @term{values}.

The @term{scope} of the binding of @param{var}
does not include the @param{list-form},
but the @param{result-form} is included.

It is @term{implementation-dependent} whether @symbolref{dolist, SYM}
@term{establishes} a new @term{binding} of @param{var} on each iteration
or whether it @term{establishes} a binding for @param{var} once at the
beginning and then @param{assigns} it on any subsequent iterations.

@subsubheading Examples:
@lisp
 (setq temp-two '()) @EV{} NIL
 (dolist (temp-one '(1 2 3 4) temp-two) (push temp-one temp-two)) @EV{} (4 3 2 1)

 (setq temp-two 0) @EV{} 0
 (dolist (temp-one '(1 2 3 4)) (incf temp-two)) @EV{} NIL
 temp-two @EV{} 4

 (dolist (x '(a b c d)) (prin1 x) (princ " "))
@OUT{} A B C D
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{do},
@ref{dotimes},
@ref{tagbody},
@ref{Traversal Rules and Side Effects}

@subsubheading Notes:

@symbolref{go, SYM} may be used within the body of @symbolref{dolist, SYM}
to transfer control to a statement labeled by a @param{tag}.



@node loop
@subsection loop (Macro)
@syindexanchor{loop, SYM}
@cindex loop



@subsubheading Syntax:

The ``simple'' @symbolref{loop, SYM} @term{form}:

@DefmacWithValues{loop, @starparam{compound-form}, @starparam{result}}

The ``extended'' @symbolref{loop, SYM} @term{form}:

@DefmacWithValues{loop, @brac{@down{name-clause}} @stardown{variable-clause} @stardown{main-clause}, @starparam{result}}

@auxbnf{name-clause, @loopref{named} @param{name}}
@auxbnf{variable-clause, @down{with-clause} | @down{initial-final} | @down{for-as-clause}}
@auxbnf{with-clause, @loopref{with} @param{var1} @brac{@param{type-spec}} @brac{@mat{=} @param{form1}} @star{@curly{@loopref{and} @param{var2} @brac{@param{type-spec}} @brac{@mat{=} @param{form2}}}}}
@auxbnf{main-clause, @down{unconditional} | @down{accumulation} | @down{conditional} | @down{termination-test} | @down{initial-final}}
@auxbnf{initial-final, @loopref{initially} @plusparam{compound-form} | @loopref{finally} @plusparam{compound-form}}
@auxbnf{unconditional, @curly{@loopref{do} | @loopref{doing}} @plusparam{compound-form} | @loopref{return} @curly{@param{form} | @loopref{it}}}
@auxbnf{accumulation, @down{list-accumulation} | @down{numeric-accumulation}}
@auxbnf{list-accumulation, @curly{@loopref{collect} | @loopref{collecting} | @loopref{append} | @loopref{appending} | @loopref{nconc} | @loopref{nconcing}} @curly{@param{form} | @loopref{it}} @CR{} @brac{@loopref{into} @param{simple-var}}}
@auxbnf{numeric-accumulation, @curly{@loopref{count} | @loopref{counting} | @loopref{sum} | @loopref{summing} | @CR{} @xcurly{}@loopref{maximize} | @loopref{maximizing} | @loopref{minimize} | @loopref{minimizing}} @curly{@param{form} | @loopref{it}} @CR{} @brac{@loopref{into} @param{simple-var}} @brac{@param{type-spec}}}
@auxbnf{conditional, @curly{@loopref{if} | @loopref{when} | @loopref{unless}} @param{form} @down{selectable-clause} @star{@curly{@loopref{and} @down{selectable-clause}}} @CR{} @brac{@loopref{else} @down{selectable-clause} @star{@curly{@loopref{and} @down{selectable-clause}}}} @CR{} @brac{@loopref{end}}}
@auxbnf{selectable-clause, @down{unconditional} | @down{accumulation} | @down{conditional}}
@auxbnf{termination-test, @loopref{while} @param{form} | @loopref{until} @param{form} | @loopref{repeat} @param{form} | @loopref{always} @param{form} | @loopref{never} @param{form} | @loopref{thereis} @param{form}}
@auxbnf{for-as-clause, @curly{@loopref{for} | @loopref{as}} @down{for-as-subclause} @star{@curly{@loopref{and} @down{for-as-subclause}}}}
@auxbnf{for-as-subclause, @down{for-as-arithmetic} | @down{for-as-in-list} | @down{for-as-on-list} | @down{for-as-equals-then} |@CR{} @down{for-as-across} | @down{for-as-hash} | @down{for-as-package}}
@auxbnf{for-as-arithmetic, @param{var} @brac{@param{type-spec}} @down{for-as-arithmetic-subclause}}
@auxbnf{for-as-arithmetic-subclause, @down{arithmetic-up} | @down{arithmetic-downto} | @down{arithmetic-downfrom}}
@auxbnf{arithmetic-up, @begininterleave{}@curly{@loopref{from} | @loopref{upfrom}} @param{form1} | @extrainterleave{}@curly{@loopref{to} | @loopref{upto} | @loopref{below}} @param{form2} | @extrainterleave{}@loopref{by} @param{form3}@endinterleave{}@prevplus{}}
@auxbnf{arithmetic-downto, @begininterleave{}@one{@curly{@loopref{from} @param{form1}}} | @extrainterleave{}@one{@curly{@curly{@loopref{downto} | @loopref{above}} @param{form2}}} | @extrainterleave{}@loopref{by} @param{form3}@endinterleave{}}
@auxbnf{arithmetic-downfrom, @begininterleave{}@one{@curly{@loopref{downfrom} @param{form1}}} | @extrainterleave{}@curly{@loopref{to} | @loopref{downto} | @loopref{above}} @param{form2} | @extrainterleave{}@loopref{by} @param{form3}@endinterleave{}}
@auxbnf{for-as-in-list, @param{var} @brac{@param{type-spec}} @loopref{in} @param{form1} @brac{@loopref{by} @param{step-fun}}}
@auxbnf{for-as-on-list, @param{var} @brac{@param{type-spec}} @loopref{on} @param{form1} @brac{@loopref{by} @param{step-fun}}}
@auxbnf{for-as-equals-then, @param{var} @brac{@param{type-spec}} @mat{=} @param{form1} @brac{@loopref{then} @param{form2}}}
@auxbnf{for-as-across, @param{var} @brac{@param{type-spec}} @loopref{across} @param{vector}}
@auxbnf{for-as-hash, @param{var} @brac{@param{type-spec}} @loopref{being} @curly{@loopref{each} | @loopref{the}} @CR{} @lcurly{}@curly{@loopref{hash-key} | @loopref{hash-keys}} @curly{@loopref{in} | @loopref{of}} @param{hash-table} @CR{} @xcurly{}@brac{@loopref{using} @paren{@loopref{hash-value} @param{other-var}}} | @CR{} @xcurly{}@curly{@loopref{hash-value} | @loopref{hash-values}} @curly{@loopref{in} | @loopref{of}} @param{hash-table} @CR{} @xcurly{}@brac{@loopref{using} @paren{@loopref{hash-key} @param{other-var}}}@rcurly{}}
@auxbnf{for-as-package, @param{var} @brac{@param{type-spec}} @loopref{being} @curly{@loopref{each} | @loopref{the}} @CR{} @lcurly{}@loopref{symbol} | @loopref{symbols} |@CR{} @xcurly{}@loopref{present-symbol} | @loopref{present-symbols} |@CR{} @xcurly{}@loopref{external-symbol} | @loopref{external-symbols}@rcurly{} @CR{} @brac{@curly{@loopref{in} | @loopref{of}} @param{package}}}
@auxbnf{type-spec, @down{simple-type-spec} | @down{destructured-type-spec}}
@auxbnf{simple-type-spec, @symbolref{fixnum, SYM} | @code{float} | @symbolref{t, SC} | @code{nil}}
@auxbnf{destructured-type-spec, @loopref{of-type} @param{d-type-spec}}
@auxbnf{d-type-spec, @param{type-specifier} | @f{(@param{d-type-spec} . @param{d-type-spec})}}
@auxbnf{var, @down{d-var-spec}}
@auxbnf{var1, @down{d-var-spec}}
@auxbnf{var2, @down{d-var-spec}}
@auxbnf{other-var, @down{d-var-spec}}
@auxbnf{d-var-spec, @param{simple-var} | @nil{}@spc{}| @paren{@down{d-var-spec} @f{.} @down{d-var-spec}}}

@subsubheading Arguments and Values:

@param{compound-form}---a @term{compound form}.

@param{name}---a @term{symbol}.

@param{simple-var}---a @term{symbol} (a @term{variable} name).

@param{form}, @param{form1}, @param{form2}, @param{form3}---a @term{form}.

@param{step-fun}---a @term{form} that evaluates to a @term{function} of one @term{argument}.

@param{vector}---a @term{form} that evaluates to a @term{vector}.

@param{hash-table}---a @term{form} that evaluates to a @term{hash table}.

@param{package}---a @term{form} that evaluates to a @term{package designator}.

@param{type-specifier}---a @term{type specifier}.
This might be either an @term{atomic type specifier} or a @term{compound type specifier},
which introduces some additional complications to proper parsing in the face of
destructuring; for further information, see @ref{Destructuring}.

@param{result}---an @term{object}.


@subsubheading Description:

For details, see @ref{The LOOP Facility}.

@subsubheading Examples:

@lisp
;; An example of the simple form of LOOP.
 (defun sqrt-advisor ()
   (loop (format t "~&Number: ")
         (let ((n (parse-integer (read-line) :junk-allowed t)))
           (when (not n) (return))
           (format t "~&The square root of ~D is ~D.~%" n (sqrt n)))))
@EV{} SQRT-ADVISOR
 (sqrt-advisor)
@OUT{} Number: @IN{5@CRLF{}}
@OUT{} The square root of 5 is 2.236068.
@OUT{} Number: @IN{4@CRLF{}}
@OUT{} The square root of 4 is 2.
@OUT{} Number: @IN{done@CRLF{}}
@EV{} NIL

;; An example of the extended form of LOOP.
 (defun square-advisor ()
   (loop as n = (progn (format t "~&Number: ")
                       (parse-integer (read-line) :junk-allowed t))
         while n
         do (format t "~&The square of ~D is ~D.~%" n (* n n))))
@EV{} SQUARE-ADVISOR
 (square-advisor)
@OUT{} Number: @IN{4@CRLF{}}
@OUT{} The square of 4 is 16.
@OUT{} Number: @IN{23@CRLF{}}
@OUT{} The square of 23 is 529.
@OUT{} Number: @IN{done@CRLF{}}
@EV{} NIL

;; Another example of the extended form of LOOP.
 (loop for n from 1 to 10
       when (oddp n)
         collect n)
@EV{} (1 3 5 7 9)
@end lisp


@subsubheading See Also:

@ref{do}, @ref{dolist}, @ref{dotimes},
@ref{return}, @ref{go}, @ref{throw},
@ref{Destructuring}

@subsubheading Notes:

Except that @symbolref{loop-finish, SYM} cannot be used within a simple @symbolref{loop, SYM} @term{form},
a simple @symbolref{loop, SYM} @term{form} is related to an extended @symbolref{loop, SYM} @term{form}
in the following way:

@lisp
 (loop @starparam{compound-form}) @EQ{} (loop do @starparam{compound-form})
@end lisp



@node loop-finish
@subsection loop-finish (Local Macro)
@syindexanchor{loop-finish, SYM}
@cindex loop-finish


@subsubheading Syntax:

@DefmacNoReturn{loop-finish, @noargs{}}

@subsubheading Description:

@Themacro{loop-finish} can be used lexically within
an extended
@symbolref{loop, SYM} @term{form}
to terminate that @term{form} ``normally.''
That is, it transfers control to the loop epilogue
of the lexically innermost extended @symbolref{loop, SYM} @term{form}.
This permits execution of any @code{finally} clause (for effect)
and
the return of
any accumulated result.

@subsubheading Examples:

@lisp
;; Terminate the loop, but return the accumulated count.
 (loop for i in '(1 2 3 stop-here 4 5 6)
       when (symbolp i) do (loop-finish)
       count i)
@EV{} 3

;; The preceding loop is equivalent to:
 (loop for i in '(1 2 3 stop-here 4 5 6)
       until (symbolp i)
       count i)
@EV{} 3

;; While LOOP-FINISH can be used can be used in a variety of
;; situations it is really most needed in a situation where a need
;; to exit is detected at other than the loop's `top level'
;; (where UNTIL or WHEN often work just as well), or where some
;; computation must occur between the point where a need to exit is
;; detected and the point where the exit actually occurs.  For example:
 (defun tokenize-sentence (string)
   (macrolet ((add-word (wvar svar)
                `(when ,wvar
                   (push (coerce (nreverse ,wvar) 'string) ,svar)
                   (setq ,wvar nil))))
     (loop with word = '() and sentence = '() and endpos = nil
           for i below (length string)
           do (let ((char (aref string i)))
                (case char
                  (#@bsl{}Space (add-word word sentence))
                  (#@bsl{}. (setq endpos (1+ i)) (loop-finish))
                  (otherwise (push char word))))
           finally (add-word word sentence)
                   (return (values (nreverse sentence) endpos)))))
@EV{} TOKENIZE-SENTENCE

 (tokenize-sentence "this is a sentence. this is another sentence.")
@EV{} ("this" "is" "a" "sentence"), 19

 (tokenize-sentence "this is a sentence")
@EV{} ("this" "is" "a" "sentence"), NIL

@end lisp


@subsubheading Side Effects:

Transfers control.

@subsubheading Exceptional Situations:

Whether or not @symbolref{loop-finish, SYM} is @term{fbound} in the
@term{global environment} is @term{implementation-dependent};
however, the restrictions on redefinition and @term{shadowing} of
@symbolref{loop-finish, SYM} are the same as for @term{symbols} in the @code{COMMON-LISP} @term{package}
which are @term{fbound} in the @term{global environment}.
The consequences of attempting to use @symbolref{loop-finish, SYM} outside
of @symbolref{loop, SYM} are undefined.

@subsubheading See Also:

@ref{loop},
@ref{The LOOP Facility}

@subsubheading Notes:
